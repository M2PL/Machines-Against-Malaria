{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S5dz-2pZYlnw",
        "outputId": "0fed9b43-4474-4aae-a5b0-8d30e1cef73c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "# LOAD the data\n",
        "from google.colab import drive\n",
        "\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f7Hf4GsMY4b_",
        "outputId": "15c2a5f3-e252-4645-9f25-560a8761efb4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting rdkit-pypi\n",
            "  Downloading rdkit_pypi-2022.9.5-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (29.4 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m29.4/29.4 MB\u001b[0m \u001b[31m23.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from rdkit-pypi) (1.22.4)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.9/dist-packages (from rdkit-pypi) (8.4.0)\n",
            "Installing collected packages: rdkit-pypi\n",
            "Successfully installed rdkit-pypi-2022.9.5\n",
            "\n",
            "real\t0m17.455s\n",
            "user\t0m8.333s\n",
            "sys\t0m0.896s\n"
          ]
        }
      ],
      "source": [
        "!time pip install rdkit-pypi"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "czGg-Fy5Y5Nv"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "# import seaborn as sn\n",
        "# import scipy as sp\n",
        "\n",
        "import random\n",
        "import tensorflow\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Activation, Dense, BatchNormalization, Conv2D, Dropout, Flatten\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.metrics import categorical_crossentropy\n",
        "from tensorflow.keras.wrappers.scikit_learn import KerasClassifier, KerasRegressor\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "\n",
        "from rdkit import Chem # A core definition\n",
        "from rdkit.Chem.Draw import MolsToGridImage # For displaying multiple molecules\n",
        "from rdkit.Chem.AllChem import * # conformer generation and adding H \n",
        "from rdkit.Chem.rdMolDescriptors import * # To calculate descriptors\n",
        "from rdkit.Chem.Draw import IPythonConsole # This displays the molecule in-line\n",
        "from rdkit.Chem import PandasTools # for pandas dataframe with rdkit\n",
        "from rdkit.DataStructs.cDataStructs import ConvertToNumpyArray\n",
        "import pandas.io.formats.style"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2CftPmPDY82J",
        "outputId": "e90ff035-54b5-452c-85ae-329336137683"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/PhD/PTS_datasets\n",
            " ABSActiveInactiveFeatCorrelationOnABSActives.csv\n",
            " ABSActiveInactiveFeatCorrelationOnABSInactives.csv\n",
            " absdualGBMFinalizedhpt5005_UMFP_model_prediction_on_pbox.csv\n",
            " absdualLRFinalizedhpt5005_UMFP_model_prediction_on_pbox.csv\n",
            " absdualRFFinalizedhpt5005_UMFP_model_prediction_on_pbox.csv\n",
            " absdualsvmFinalizedhpt5005_UMFP_model_prediction_on_pbox.csv\n",
            " asexualsFeaturesZtestprop.csv\n",
            " asexualsFeaturesZtestpropInact.csv\n",
            " asexualsFeaturesZtestproportionsActvsInactv.csv\n",
            " asexualsFeaturesZtestpropTopABSfeat.csv\n",
            " asexualsFeaturesZtestpropTopDualfeat.csv\n",
            " asexualsFeaturesZtestpropTopfeat.csv\n",
            " asexualsGBMhpt_UMFP_model5atom500bitFinal.pkl\n",
            " asexualsLogisticRegressionFinalHPT_UMFP_model5005.pkl\n",
            " asexualsSVCFinalHPT_UMFP_model5005.pkl\n",
            " axldeepinsighOverUnderXttestMFP.npy\n",
            " axldeepinsighOverUnderXttrainMFP.npy\n",
            " axldeepinsighOverUnderYttestMFP.npy\n",
            " axldeepinsighOverUnderYttrainMFP.npy\n",
            " axl_UnderMFP_GBM_HPT5005_FeatureImp.csv\n",
            " axl_UnderMFP_LR_HPT_FeatureImp.csv\n",
            " axl_UnderMFP_RF_HPT5005_FeatureImp2.csv\n",
            " CTCVAE_300bit5radiusMFP.pkl\n",
            " CTCVAE_300bit5raduisMFP_500samples.csv\n",
            " CTGAN_300bit5radiusMFP.pkl\n",
            " CTGAN_300bit5raduisMFP_500samples.csv\n",
            " data\n",
            " DualactiveFeaturesZtestprop.csv\n",
            " DualActiveInactiveFeatCorrelationOnDualActives.csv\n",
            " DualActiveInactiveFeatCorrelationOnDualInactives.csv\n",
            " finalized_model.sav\n",
            " GanSexualsU_MACCs.pkl\n",
            " image_at_epoch_0000.png\n",
            " M_asexuals_lib_hits_nd_clst_nhts.csv\n",
            " Miniconda3-py37_4.12.0-Linux-x86_64.sh\n",
            " M_sexual_LibrariesC_hits_nd_2ndclst_nhits.csv\n",
            "'Sexual_libraries_hits and nonhits_composition.csv'\n",
            " sexualsFeaturesZtestpropInact.csv\n",
            " SexualsFeaturesZtestpropTopABSfeat.csv\n",
            " SexualsFeaturesZtestpropTopDualfeat.csv\n",
            " sexualsGBMFinalHPT_UMFP_model5005.pkl\n",
            " sexualsLRFinalHPT_UMFP_model5005.pkl\n",
            " sexualsRFFinalHPT_UMFP_model5005.pkl\n",
            " sexualsSVCFinalHPT_UMFP_model5005.pkl\n",
            " sxl_UnderMACCS_LR_HPT_FeatureImp.csv\n",
            " sxl_UnderMFP_GBM_HPT5005_FeatureImp.csv\n",
            " sxl_UnderMFP_LR_HPT5005_FeatureImp.csv\n",
            " sxl_UnderMFP_RF_HPT5005_FeatureImp2.csv\n",
            " sxl_UnderMFP_RF_HPT_FeatureImp2.csv\n",
            " sxl_UnderX_MFP.csv\n",
            " sxl_UnderX_MFP.csv.npy\n",
            " sxl_UnderX_MFP.npy\n",
            " TCGANSexualsU_MACCs.pkl\n",
            "No     8975\n",
            "Yes     916\n",
            "Name: S_Hit, dtype: int64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                              Smiles S_Hit\n",
              "0     NC(=O)c1cccc2nc([C@H]3CCN(Cc4ccccn4)C3)[nH]c12   Yes\n",
              "1              Fc1ccc2[nH]c(C3CCCN3Cc3c[nH]cn3)nc2c1   Yes\n",
              "2                      COc1c(C)cnc(CN(C)C2CCCCC2)c1C   Yes\n",
              "3              Cc1cccc(CN2CCCC2c2cccc(Nc3nccs3)n2)c1   Yes\n",
              "4                 CCSCCNc1nc(-c2ccccn2)nc2c1c(C)nn2C   Yes\n",
              "...                                              ...   ...\n",
              "9886        Cc1nc(C)n(C2CCCN(C(=O)c3ncoc3C(C)C)C2)n1    No\n",
              "9887            COCCN1CCN(Cc2c(C)noc2C)Cc2ccc(C)nc21    No\n",
              "9888             CCc1ncnc2c1CCN(Cc1ccc3c(c1)OCO3)CC2    No\n",
              "9889            CCC1CN(CC(=O)NCCN2CCCCCC2)c2ccccc2S1    No\n",
              "9890              Cc1cnn(CC2CCCN2Cc2nc3ccccc3nc2C)c1    No\n",
              "\n",
              "[9891 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c623c733-69e6-4387-ae8e-499c05c0c536\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Smiles</th>\n",
              "      <th>S_Hit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NC(=O)c1cccc2nc([C@H]3CCN(Cc4ccccn4)C3)[nH]c12</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Fc1ccc2[nH]c(C3CCCN3Cc3c[nH]cn3)nc2c1</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>COc1c(C)cnc(CN(C)C2CCCCC2)c1C</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Cc1cccc(CN2CCCC2c2cccc(Nc3nccs3)n2)c1</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CCSCCNc1nc(-c2ccccn2)nc2c1c(C)nn2C</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9886</th>\n",
              "      <td>Cc1nc(C)n(C2CCCN(C(=O)c3ncoc3C(C)C)C2)n1</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9887</th>\n",
              "      <td>COCCN1CCN(Cc2c(C)noc2C)Cc2ccc(C)nc21</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9888</th>\n",
              "      <td>CCc1ncnc2c1CCN(Cc1ccc3c(c1)OCO3)CC2</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9889</th>\n",
              "      <td>CCC1CN(CC(=O)NCCN2CCCCCC2)c2ccccc2S1</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9890</th>\n",
              "      <td>Cc1cnn(CC2CCCN2Cc2nc3ccccc3nc2C)c1</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>9891 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c623c733-69e6-4387-ae8e-499c05c0c536')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c623c733-69e6-4387-ae8e-499c05c0c536 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c623c733-69e6-4387-ae8e-499c05c0c536');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "############################################Sexual data\n",
        "#Optional: move to the desired location:\n",
        "%cd /content/drive/MyDrive/PhD/PTS_datasets/\n",
        "!ls '/content/drive/MyDrive/PhD/PTS_datasets/'\n",
        "import pandas as pd\n",
        "sxl= pd.read_csv(\"M_sexual_LibrariesC_hits_nd_2ndclst_nhits.csv\")\n",
        "sxl['S_Hit'] = sxl['S_Hit'].replace(np.nan, \"No\")\n",
        "sxl = sxl.iloc[: , 1:]\n",
        "print(sxl['S_Hit'].value_counts())\n",
        "sxl"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2QaSmxw8ZxdZ"
      },
      "source": [
        "# MACCSKeysFingerprint"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "Ob9Gky_4ZfDt",
        "outputId": "d0764049-7ca4-4d45-a3ee-056861f4a48b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting deepchem\n",
            "  Downloading deepchem-2.7.1-py3-none-any.whl (693 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m693.2/693.2 KB\u001b[0m \u001b[31m12.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting scipy<1.9\n",
            "  Downloading scipy-1.8.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (42.2 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.2/42.2 MB\u001b[0m \u001b[31m12.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting rdkit\n",
            "  Downloading rdkit-2022.9.5-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (29.4 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m29.4/29.4 MB\u001b[0m \u001b[31m38.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (from deepchem) (1.4.4)\n",
            "Requirement already satisfied: numpy>=1.21 in /usr/local/lib/python3.9/dist-packages (from deepchem) (1.22.4)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.9/dist-packages (from deepchem) (1.1.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.9/dist-packages (from deepchem) (1.2.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.9/dist-packages (from pandas->deepchem) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas->deepchem) (2022.7.1)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.9/dist-packages (from rdkit->deepchem) (8.4.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.9/dist-packages (from scikit-learn->deepchem) (3.1.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/dist-packages (from python-dateutil>=2.8.1->pandas->deepchem) (1.15.0)\n",
            "Installing collected packages: scipy, rdkit, deepchem\n",
            "  Attempting uninstall: scipy\n",
            "    Found existing installation: scipy 1.10.1\n",
            "    Uninstalling scipy-1.10.1:\n",
            "      Successfully uninstalled scipy-1.10.1\n",
            "Successfully installed deepchem-2.7.1 rdkit-2022.9.5 scipy-1.8.1\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "rdkit",
                  "scipy"
                ]
              }
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "!pip install deepchem"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sYQZg9gkZeF1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "93c605e8-8f4a-429f-ad8a-91c52324fcc1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:deepchem.models.torch_models:Skipped loading modules with pytorch-geometric dependency, missing a dependency. No module named 'torch_geometric'\n",
            "WARNING:deepchem.models:Skipped loading modules with pytorch-geometric dependency, missing a dependency. cannot import name 'DMPNN' from 'deepchem.models.torch_models' (/usr/local/lib/python3.9/dist-packages/deepchem/models/torch_models/__init__.py)\n",
            "WARNING:deepchem.models:Skipped loading modules with pytorch-lightning dependency, missing a dependency. No module named 'pytorch_lightning'\n",
            "WARNING:deepchem.models:Skipped loading some Jax models, missing a dependency. No module named 'haiku'\n"
          ]
        }
      ],
      "source": [
        "import deepchem as dc\n",
        "from deepchem.feat import MACCSKeysFingerprint"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3jAkY8TcbA2v",
        "outputId": "42cd17d5-e16b-4918-88a2-de1dc35b6616"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    8975\n",
              "1     916\n",
              "Name: Target, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "sxl[\"Target\"] = np.where(sxl[\"S_Hit\"]== \"Yes\", 1,0)\n",
        "sxl[\"Target\"].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hTSHuZYYaTmj",
        "outputId": "ced6a7fb-5f6d-4afc-c26f-23574e45ea77"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       NC(=O)c1cccc2nc([C@H]3CCN(Cc4ccccn4)C3)[nH]c12\n",
              "1                Fc1ccc2[nH]c(C3CCCN3Cc3c[nH]cn3)nc2c1\n",
              "2                        COc1c(C)cnc(CN(C)C2CCCCC2)c1C\n",
              "3                Cc1cccc(CN2CCCC2c2cccc(Nc3nccs3)n2)c1\n",
              "4                   CCSCCNc1nc(-c2ccccn2)nc2c1c(C)nn2C\n",
              "                             ...                      \n",
              "9886          Cc1nc(C)n(C2CCCN(C(=O)c3ncoc3C(C)C)C2)n1\n",
              "9887              COCCN1CCN(Cc2c(C)noc2C)Cc2ccc(C)nc21\n",
              "9888               CCc1ncnc2c1CCN(Cc1ccc3c(c1)OCO3)CC2\n",
              "9889              CCC1CN(CC(=O)NCCN2CCCCCC2)c2ccccc2S1\n",
              "9890                Cc1cnn(CC2CCCN2Cc2nc3ccccc3nc2C)c1\n",
              "Name: Smiles, Length: 9891, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "dchm= sxl[\"Smiles\"]\n",
        "dchm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U9oQ6FwCZojx",
        "outputId": "2c1562a9-1f52-40d0-d107-673564eb2692"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0, 0, 0, ..., 1, 1, 0],\n",
              "       [0, 0, 0, ..., 0, 1, 0],\n",
              "       [0, 0, 0, ..., 1, 1, 0],\n",
              "       ...,\n",
              "       [0, 0, 0, ..., 1, 1, 0],\n",
              "       [0, 0, 0, ..., 1, 1, 0],\n",
              "       [0, 0, 0, ..., 0, 1, 0]])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "mols = [Chem.MolFromSmiles(x) for x in dchm]\n",
        "featurizer = MACCSKeysFingerprint()\n",
        "maccs = featurizer.featurize(mols)\n",
        "maccs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4UCT8af-aXiI",
        "outputId": "23c39530-8203-493d-a926-a588032eed54"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0\n",
            " 0 1 0 1 0 1 1 0 0 1 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 1 1 0 0 0 1 0 0 0 0 1\n",
            " 1 0 0 0 0 0 1 1 0 1 1 1 0 0 1 0 0 1 1 0 1 0 0 0 0 0 1 1 0 0 0 1 0 0 1 0 1\n",
            " 1 0 0 1 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0]\n",
            "Target 1\n",
            "Input [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n",
            " 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 1 0 0 1 0 1\n",
            " 1 0 1 0 0 0 1 1 0 1 1 1 0 1 1 0 1 1 1 0 0 1 0 0 0 0 1 1 1 0 0 1 1 1 1 0 1\n",
            " 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0]\n",
            "Target [1. 0.]\n",
            "Xt-train input shape: (7912, 167)\n",
            "Yt-train label shape: (7912, 2)\n"
          ]
        }
      ],
      "source": [
        "#Split\n",
        "\n",
        "Xt = np.array(maccs)\n",
        "Yt = np.array(list(sxl[\"Target\"]))\n",
        "print(\"Input\",Xt[0])\n",
        "print(\"Target\",Yt[0])\n",
        "\n",
        "#Split\n",
        "from sklearn.model_selection import train_test_split\n",
        "Xt_train, Xt_test = train_test_split(Xt, test_size=0.2)\n",
        "Yt_train, Yt_test = train_test_split(Yt, test_size=0.2)\n",
        "\n",
        "y_true= Yt_test\n",
        "\n",
        "Yt_train = keras.utils.to_categorical(Yt_train)\n",
        "Yt_test = keras.utils.to_categorical(Yt_test)\n",
        "\n",
        "print(\"Input\",Xt_train[0])\n",
        "print(\"Target\",Yt_train[0])\n",
        "print(\"Xt-train input shape:\", Xt_train.shape)\n",
        "print(\"Yt-train label shape:\", Yt_train.shape)\n",
        "# print(Xt_train.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5W1SfXrOEUkg",
        "outputId": "9653eb22-8e5b-43d4-e1da-288e66e1cff7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "###check to see if hits are in correct places\n",
        "maccs[0:4]\n",
        "Yt[0:4]\n",
        "maccs[9887:9890]\n",
        "Yt[9887:9890]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "OJSxLbwknW-s",
        "outputId": "55fbe5cf-66a8-436a-a225-2fb161bc13c1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      0    1    2    3    4    5    6    7    8    9    ...  157  158  159  \\\n",
              "0       0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "1       0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "2       0    0    0    0    0    0    0    0    0    0  ...    1    1    0   \n",
              "3       0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "4       0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "...   ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
              "9886    0    0    0    0    0    0    0    0    0    0  ...    0    1    1   \n",
              "9887    0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "9888    0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "9889    0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "9890    0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "\n",
              "      160  161  162  163  164  165  166  \n",
              "0       0    1    1    1    1    1    0  \n",
              "1       0    1    1    1    0    1    0  \n",
              "2       1    1    1    1    1    1    0  \n",
              "3       1    1    1    1    0    1    0  \n",
              "4       1    1    1    1    0    1    0  \n",
              "...   ...  ...  ...  ...  ...  ...  ...  \n",
              "9886    1    1    1    1    1    1    0  \n",
              "9887    1    1    1    1    1    1    0  \n",
              "9888    1    1    1    1    1    1    0  \n",
              "9889    1    1    1    1    1    1    0  \n",
              "9890    1    1    1    1    0    1    0  \n",
              "\n",
              "[9891 rows x 167 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ad865752-c3e4-47cb-8d52-374f0ee62922\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>157</th>\n",
              "      <th>158</th>\n",
              "      <th>159</th>\n",
              "      <th>160</th>\n",
              "      <th>161</th>\n",
              "      <th>162</th>\n",
              "      <th>163</th>\n",
              "      <th>164</th>\n",
              "      <th>165</th>\n",
              "      <th>166</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9886</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9887</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9888</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9889</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9890</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>9891 rows × 167 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad865752-c3e4-47cb-8d52-374f0ee62922')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ad865752-c3e4-47cb-8d52-374f0ee62922 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ad865752-c3e4-47cb-8d52-374f0ee62922');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "df=[]\n",
        "df = pd.DataFrame(maccs)\n",
        "#df[\"Target\"]= sxl[\"Target\"]\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ch8uoenvndIx"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "Xt_train, Xt_test, Yt_train, Yt_test = train_test_split(df, sxl[\"Target\"],test_size=0.2, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nYysoO4qEVy1"
      },
      "outputs": [],
      "source": [
        "######################################################################XGBoost (https://www.analyticsvidhya.com/blog/2020/07/10-techniques-to-deal-with-class-imbalance-in-machine-learning/)\n",
        "# load library\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "\n",
        "xgbc = GradientBoostingClassifier()\n",
        "\n",
        "# fit the predictor and target\n",
        "xgbc.fit(Xt_train, Yt_train)\n",
        "\n",
        "# predict\n",
        "xgbc_predict = xgbc.predict(Xt_test)# check performance\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LWrdx41Cnz6Y",
        "outputId": "da83d353-c907-4661-eb08-0c95158f3aff"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "/content\n",
            "0.9666498231430015\n"
          ]
        }
      ],
      "source": [
        "# Save Model Using joblib\n",
        "import pandas\n",
        "from sklearn import model_selection\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import joblib\n",
        "\n",
        "%cd /content/\n",
        "# save the model to disk\n",
        "filename = 'sexualsXGBoost_UMACCS_model.sav'\n",
        "joblib.dump(xgbc, filename)\n",
        " \n",
        "# some time later...\n",
        " \n",
        "# load the model from disk\n",
        "loaded_model = joblib.load(filename)\n",
        "result = loaded_model.score(Xt_test, Yt_test)\n",
        "print(result)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xwixRSN6n7K0"
      },
      "outputs": [],
      "source": [
        "!cp 'sexualsXGBoost_UMACCS_model.sav' /content/drive/MyDrive/PhD/XGBoost_MACCS"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ENq6VsgWn3jZ",
        "outputId": "a1f43cd7-6ba7-4862-fa02-40cc019edf49"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "/content/drive/MyDrive/PhD/XGBoost_MACCS\n",
            "sexualsXGBoost_UMACCS_model.sav\n"
          ]
        }
      ],
      "source": [
        "###Import model\n",
        "#Optional: move to the desired location:\n",
        "%cd /content/drive/MyDrive/PhD/XGBoost_MACCS\n",
        "!ls '/content/drive/MyDrive/PhD/XGBoost_MACCS'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g1YPBp8un0Iq",
        "outputId": "118e5747-7aa1-43b8-ae98-aef64e3b6571"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0.9666498231430015\n"
          ]
        }
      ],
      "source": [
        "import pandas\n",
        "from sklearn import model_selection\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import joblib\n",
        "\n",
        "# load the model from disk\n",
        "loaded_model = joblib.load('/content/drive/MyDrive/PhD/XGBoost_MACCS/sexualsXGBoost_UMACCS_model.sav')\n",
        "result = loaded_model.score(Xt_test, Yt_test)\n",
        "print(result)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6QjNj3qdnjmg",
        "outputId": "a3e4e074-0657-415c-bf15-1bfb98e58f26"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy: 0.966650\n",
            "Recall 0.701571\n",
            "precision 0.937063\n",
            "F1 score: 0.802395\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "array([[1779,    9],\n",
              "       [  57,  134]])"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score\n",
        "# accuracy: (tp + tn) / (p + n)\n",
        "accuracy = accuracy_score(Yt_test,xgbc_predict)\n",
        "print('Accuracy: %f' % accuracy)\n",
        "recall= recall_score(Yt_test,xgbc_predict)\n",
        "print(\"Recall %f\" % recall)\n",
        "precision= precision_score(Yt_test,xgbc_predict)\n",
        "print(\"precision %f\" % precision)\n",
        "# f1: 2 tp / (2 tp + fp + fn)\n",
        "f1 = f1_score(Yt_test,xgbc_predict)\n",
        "print('F1 score: %f' % f1)\n",
        "cm= confusion_matrix(Yt_test,xgbc_predict)\n",
        "cm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x89_mEJxnqjB",
        "outputId": "4ac79dd8-ddb7-4d7b-c908-652f0120c0c7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ROCAUC score: 0.8482685617906462\n",
            "Accuracy score: 0.9666498231430015\n",
            "F1 score: 0.8023952095808383\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score\n",
        "print('ROCAUC score:',roc_auc_score(Yt_test, xgbc_predict))\n",
        "print('Accuracy score:',accuracy_score(Yt_test, xgbc_predict))\n",
        "print('F1 score:',f1_score(Yt_test,xgbc_predict))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BxsLy-iynwgM",
        "outputId": "bd498cc6-9433-44ba-bf85-a7edddfa9fc7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Cohens kappa: 0.784593\n",
            "ROC AUC: 0.848269\n",
            "[[1779    9]\n",
            " [  57  134]]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score, cohen_kappa_score\n",
        "# kappa\n",
        "kappa = cohen_kappa_score(Yt_test, xgbc_predict)\n",
        "print('Cohens kappa: %f' % kappa)\n",
        "# ROC AUC\n",
        "auc = roc_auc_score(Yt_test, xgbc_predict)\n",
        "print('ROC AUC: %f' % auc)\n",
        "# confusion matrix\n",
        "matrix = confusion_matrix(Yt_test, xgbc_predict)\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iAXL4ZfIq29T",
        "outputId": "e7590b75-d0ea-4b6c-9d8d-71955fedc17b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Test Set: 1979\n",
            "0    1788\n",
            "1     191\n",
            "Name: Target, dtype: int64\n",
            "[[1779    9]\n",
            " [  57  134]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"Test Set: {len(Xt_test)}\")\n",
        "print(Yt_test.value_counts())\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "E9gDI4nzvqF1"
      },
      "outputs": [],
      "source": [
        "##################################################Cross validation kfold=10\n",
        "# load library\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "\n",
        "xgbc = GradientBoostingClassifier()\n",
        "\n",
        "# fit the predictor and target\n",
        "fit= xgbc.fit(Xt_train, Yt_train)\n",
        "\n",
        "# predict\n",
        "xgbc_predict = xgbc.predict(Xt_test)# check performance\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Svk23mW2vqJ1"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "scores = cross_val_score(xgbc,Xt_train, Yt_train, cv=10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-N32Og9CvqNK",
        "outputId": "1baa59d9-926d-496a-e10e-00996c003956"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0.96 accuracy with a standard deviation of 0.00\n"
          ]
        }
      ],
      "source": [
        "print(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V0xRyWIqvqQc",
        "outputId": "dc1034af-3d42-42af-f2b6-8a73563bb718"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy: 0.966650\n",
            "Recall 0.701571\n",
            "precision 0.937063\n",
            "F1 score: 0.802395\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "array([[1779,    9],\n",
              "       [  57,  134]])"
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score\n",
        "# accuracy: (tp + tn) / (p + n)\n",
        "accuracy = accuracy_score(Yt_test,xgbc_predict)\n",
        "print('Accuracy: %f' % accuracy)\n",
        "recall= recall_score(Yt_test,xgbc_predict)\n",
        "print(\"Recall %f\" % recall)\n",
        "precision= precision_score(Yt_test,xgbc_predict)\n",
        "print(\"precision %f\" % precision)\n",
        "# f1: 2 tp / (2 tp + fp + fn)\n",
        "f1 = f1_score(Yt_test,xgbc_predict)\n",
        "print('F1 score: %f' % f1)\n",
        "cm= confusion_matrix(Yt_test,xgbc_predict)\n",
        "cm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j_jiEXdWvqTj",
        "outputId": "9f9ea2cc-40ef-4b9c-b940-423d820863cf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ROCAUC score: 0.8482685617906462\n",
            "Accuracy score: 0.9666498231430015\n",
            "F1 score: 0.8023952095808383\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score\n",
        "print('ROCAUC score:',roc_auc_score(Yt_test, xgbc_predict))\n",
        "print('Accuracy score:',accuracy_score(Yt_test, xgbc_predict))\n",
        "print('F1 score:',f1_score(Yt_test,xgbc_predict))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nLQRkJsWvqYm",
        "outputId": "e9ce5720-1e00-4ac4-cd65-ecc695c60ecc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Cohens kappa: 0.784593\n",
            "ROC AUC: 0.848269\n",
            "[[1779    9]\n",
            " [  57  134]]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score, cohen_kappa_score\n",
        "# kappa\n",
        "kappa = cohen_kappa_score(Yt_test, xgbc_predict)\n",
        "print('Cohens kappa: %f' % kappa)\n",
        "# ROC AUC\n",
        "auc = roc_auc_score(Yt_test, xgbc_predict)\n",
        "print('ROC AUC: %f' % auc)\n",
        "# confusion matrix\n",
        "matrix = confusion_matrix(Yt_test, xgbc_predict)\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ajq00dy_wLx_",
        "outputId": "a49de83a-2654-40c1-856b-942302eef1d9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Test Set: 1979\n",
            "0    1788\n",
            "1     191\n",
            "Name: Target, dtype: int64\n",
            "[[1779    9]\n",
            " [  57  134]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"Test Set: {len(Xt_test)}\")\n",
        "print(Yt_test.value_counts())\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b3vlYuHR0Fja"
      },
      "source": [
        "# Hyperparameter Tuning\n",
        "\n",
        "---\n",
        "\n",
        "Random Forest Hyperparameters we’ll be Looking at:\n",
        "\n",
        "*   Number of trees (n_estimators)\n",
        "*   Number of Samples (subsample)\n",
        "*   Number of Features (max_features)\n",
        "*   Learning Rate\n",
        "*   Tree Depth (max_depth)\n",
        "---\n",
        "https://machinelearningmastery.com/gradient-boosting-machine-ensemble-in-python/\n",
        "https://www.analyticsvidhya.com/blog/2016/02/complete-guide-parameter-tuning-gradient-boosting-gbm-python/\n",
        "https://machinelearningmastery.com/gradient-boosting-with-scikit-learn-xgboost-lightgbm-and-catboost/"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "o_FBs4at2YL2"
      },
      "outputs": [],
      "source": [
        "\n",
        "# evaluate gradient boosting algorithm for classification\n",
        "from numpy import mean\n",
        "from numpy import std\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.model_selection import RepeatedStratifiedKFold\n",
        "from sklearn.ensemble import GradientBoostingClassifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "mmaftIv_2YT_",
        "outputId": "e0cd160d-9880-46d4-f859-b3860c848b59"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">10 0.943 (0.003)\n",
            ">50 0.960 (0.005)\n",
            ">100 0.965 (0.005)\n",
            ">500 0.977 (0.004)\n",
            ">1000 0.979 (0.004)\n",
            ">5000 0.978 (0.005)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD4CAYAAADiry33AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAU8klEQVR4nO3db4xc1X3G8e/j5V9bm3TXu0UUU5ukJPLKpYROKGmSGpCITCuZYFCKadM4dUqjFN6kjmRkVIiRRZNSqUqCtHETS+GNEViJ7VYJhpp1idVQeWy8BuMubKykeElhHExQagjrnV9f7F1nvKx3Z3ZnZ+aeeT7SaO+cc6/vOb7W47Pn/lNEYGZm6ZrX7AaYmdncctCbmSXOQW9mljgHvZlZ4hz0ZmaJO6fZDZiou7s7lixZ0uxmmJnlyv79+49HRM9kdS0X9EuWLKFYLDa7GWZmuSLpJ2er89SNmVniqgp6SSskDUoakrR+kvrFknZLOiRpj6RFFXVflvR89vmzejbezMymN23QS+oAHgJuBHqB1ZJ6J6z2IPBwRFwBbAQeyLb9U+Aq4ErgD4F1ki6sX/PNzGw61YzorwaGIuJoRLwDPALcNGGdXuCpbLm/or4XeDoiTkXE/wGHgBWzb7aZmVWrmqC/BHi54vuxrKzSALAqW74ZWCBpYVa+QtKvS+oGrgMunbgDSXdIKkoqlkqlWvtgZmZTqNfJ2HXAcknPAsuBYWA0Ip4Avgf8J7AV+CEwOnHjiNgcEYWIKPT0THp1kJmZzVA1QT/MmaPwRVnZaRHxSkSsiogPAhuysjeyn5si4sqIuAEQ8GJdWm5mZlWpJuj3AZdLukzSecBtwM7KFSR1Sxr/s+4GtmTlHdkUDpKuAK4AnqhX483MbHrT3jAVEack3QnsAjqALRFxWNJGoBgRO4FrgQckBfA08LfZ5ucCP5AE8CbwFxFxqv7dMDNrvCzbZqSR7wJRq714pFAohO+MNbO8k9TYMJf2R0RhsjrfGWtmljgHvZlZ4hz0ZmaJc9CbmSXOQW9mljgHvZlZ4lruxSNmlpa8XGueMge9mc2pqcK60deatytP3ZiZJc5Bb2aWOAe9mVniHPRmZolz0JuZJc5Bb2aWOAe9mVniHPRmZolz0JuZJc53xpo1mR8RYHPNQW/WZH5EgM01T92YmSXOQW9mljgHvZnZFLq6upBU8weY0XZdXV1174Pn6M3MpnDixImGnieZzcn5s/GI3swscQ56M5u1FKY3UuapGzObtRSmN1LmEb2ZWeKqCnpJKyQNShqStH6S+sWSdks6JGmPpEUVdV+RdFjSEUlflf8rNjNrqGmDXlIH8BBwI9ALrJbUO2G1B4GHI+IKYCPwQLbtHwEfAa4AlgEfApbXrfVmZjatakb0VwNDEXE0It4BHgFumrBOL/BUttxfUR/ABcB5wPnAucCrs220mZlVr5qgvwR4ueL7says0gCwKlu+GVggaWFE/JCx4P9p9tkVEUcm7kDSHZKKkoqlUqnWPphZDpVOlljz+BqOv3W82U1JXr2uulkHfF3SGuBpYBgYlfS7wFJgfM7+SUkfi4gfVG4cEZuBzQCFQsFPcLLkdHV1ceLEiRltO5PTWp2dnbz++usz2t9MxL0Xwn3vqWmbvoWdHFgwn75vFrjnZ7X93cS9F9a0frurJuiHgUsrvi/Kyk6LiFfIRvSS5gO3RMQbkv4aeCYifpHVfR/4MHBG0JulLvXLD/WlN2vqX+lkiR3fuZEY/SXbO7v53GeLdP9ad/X7k4j7ZtDQNlXN1M0+4HJJl0k6D7gN2Fm5gqRuSeN/1t3Almz5f4Dlks6RdC5jJ2LfNXVjZu2l71Af5SgDUI4yfQN9TW5R2qYN+og4BdwJ7GIspB+NiMOSNkpama12LTAo6UXgImBTVr4N+BHwHGPz+AMR8a/17YKZ5UnpZIkdQzsYKY8AMFIeYfvQds/Vz6GqrqOPiO9FxPsj4n0RsSkr+/uI2Jktb4uIy7N1PhsRv8zKRyPibyJiaUT0RsQX5q4rZpYHlaP5camN6lvtRLPvjDWzhhp4beD0aH7cSHmEg68dbFKL6q/vUB8HXj3QMv95+Vk3ZtZQ21Zua3YT5tT41FQQbB/azud+/3M1nWieCx7Rm5nVUSueaHbQm5nVSaueaPbUjVkDzOSGolLHPL7Y082DpeN0j5an32Di/qwuajl2fQs7Kc+fD/N+dR9DeeTtmm4Km4tjp0bexFGNQqEQxWKx2c0wqytJNd8wdf8z9/PY4GN88gOf5J5r7pnz/c1GyvurZV+37ryVwROD7yr/QOcHqj43MdO+SdofEYXJ6jyiN2tBrXhCz6bXqieaPUdv1oJa8YSe5ZeD3qzFtOoJPcsvB71Zi8nrnaMzecn3TD+dnZ3N7m6ueI7eWt5snsTYahcbVCOPd47O9O+50Sdx25WD3lreVEGQYlC06gk9yy9P3ZiZJc5Bb2aWOAe9mVniHPRmZonzyVizBmnke1x9+WF95f3YOejNGsCXH+ZXCsfOUzdmZolz0JuZJc5Bb2aWOAe9mVniHPRmZolz0JuZJc5Bb2aWOAe9mVniHPRmZomrKuglrZA0KGlI0vpJ6hdL2i3pkKQ9khZl5ddJOljxeVvSJ+rdCTMzO7tpg15SB/AQcCPQC6yW1DthtQeBhyPiCmAj8ABARPRHxJURcSVwPXASeKKO7Tdm9wo3M0tfNSP6q4GhiDgaEe8AjwA3TVinF3gqW+6fpB7gVuD7EXFypo21yUXEWT/V1JtZ2qoJ+kuAlyu+H8vKKg0Aq7Llm4EFkhZOWOc2YOtMGmlmZjNXr5Ox64Dlkp4FlgPDwOh4paSLgd8Ddk22saQ7JBUlFUulUp2aZGZmUN1jioeBSyu+L8rKTouIV8hG9JLmA7dExBsVq3wS+G5EnPlq+19tvxnYDFAoFDyfYG1lunMlU9XnYfot9f7lQTVBvw+4XNJljAX8bcDtlStI6gZej4gycDewZcKfsTorN7MJUg+z1PuXB9NO3UTEKeBOxqZdjgCPRsRhSRslrcxWuxYYlPQicBGwaXx7SUsY+43gP+racjMzq4pa7X/bQqEQxWKx2c1IRiu95WYupN4/y69G/9uUtD8iCpPV+c5YM7PEOejNzBLnoDczS5yD3lpCV1fXjB/hMJPturq6mtxjs8ap5vJKszl34sSJRp+4ati+zJrNI3ozs8Q56M3MEuepGzOzGcrL4x0c9GZmM5SXm/U8dWNmljiP6K0lxL0Xwn3vqWmbUsc8vtjTzYOl43SPlmvfn1mbcNBbS9CX3qz51+C+Z+7nwOBj9N3wd9xzzT217U8i7qtpE7Pc8tSN5VLpZIkdQzsIgu1D2zn+1vFmN8msZTnoLZf6DvVRjrHpmnKU6Rvoa3KLzFqXg95yZ3w0P1Iee2HZSHnEo3qzKTjoLXcqR/PjPKo3OzsHveXOwGsDp0fz40bKIxx87WCTWmTW2nzVjeXOtpXbmt0Es1zxiN7MLHEO+pzw89rNbKY8dZMTfl67mc2UR/RmZolz0JuZJc5Bb2aWOAe9mVnifDLWWkYjTwB3dnY2bF9mzeagt5Yw0yuKJOXmLT9mzeKpm4SVTpZY8/gaP+zLrM1VFfSSVkgalDQkaf0k9Ysl7ZZ0SNIeSYsq6n5H0hOSjkh6QdKS+jXfptJ3qI8Drx7ww77M2pym+7VXUgfwInADcAzYB6yOiBcq1nkM+LeI+Lak64HPRMSnsro9wKaIeFLSfKAcESfPtr9CoRDFYnGW3UrQDF6zd+Oi3+aX8+ZxfrnM48deqfl1e9z389rWbwJP3ZiNkbQ/IgqT1VUzR381MBQRR7M/7BHgJuCFinV6gS9ky/3A9mzdXuCciHgSICJ+MaMeWM2v2ut75n7KL30XyiOUzzm/5tft+VV7ZumoZurmEuDliu/HsrJKA8CqbPlmYIGkhcD7gTckfUfSs5L+MfsN4QyS7pBUlFQslUq198LO4BdzmFmlep2MXQcsl/QssBwYBkYZ+43hY1n9h4D3AmsmbhwRmyOiEBGFnp6eOjWpffnFHGZWqZqgHwYurfi+KCs7LSJeiYhVEfFBYENW9gZjo/+DEXE0Ik4xNqVzVV1abmflF3OYWaVq5uj3AZdLuoyxgL8NuL1yBUndwOsRUQbuBrZUbPubknoiogRcD/hM6xzziznMrNK0I/psJH4nsAs4AjwaEYclbZS0MlvtWmBQ0ovARcCmbNtRxqZtdkt6DhDwL3XvhZmZndW0l1c2mi+vnFyjLyPMy2WLeWmn2Vyb6vJK3xlrZpY4B72ZWeIc9GZmifPTK3PEj/E1s5lw0OeEH+NrZjPlqRszs8Q56M3MEuegNzNLnIPezCxxDnozs8T5qhtredNdVjpVva84MnPQWw44rM1mx1M3ZmaJc9CbmSXOQW9mljgHvZlZ4hz0ZmaJc9CbmSXOQW9mljgHvZlZ4hz0ZmaJc9CbmSXOQW9mljgHvZlZ4hz0ZmaJ89MrE+DH+JrZVBz0CXBYm9lUqpq6kbRC0qCkIUnrJ6lfLGm3pEOS9khaVFE3Kulg9tlZz8abmdn0ph3RS+oAHgJuAI4B+yTtjIgXKlZ7EHg4Ir4t6XrgAeBTWd1bEXFlndttZmZVqmZEfzUwFBFHI+Id4BHgpgnr9AJPZcv9k9SbmVmTVBP0lwAvV3w/lpVVGgBWZcs3AwskLcy+XyCpKOkZSZ+YbAeS7sjWKZZKpRqab2Zm06nX5ZXrgOWSngWWA8PAaFa3OCIKwO3AP0t638SNI2JzRBQiotDT01OnJpmZGVR31c0wcGnF90VZ2WkR8QrZiF7SfOCWiHgjqxvOfh6VtAf4IPCjWbe8BtNdfjgVX9FiZnlXzYh+H3C5pMsknQfcBpxx9Yykbknjf9bdwJasvFPS+ePrAB8BKk/iNkREnPVTTb2ZWZ5NG/QRcQq4E9gFHAEejYjDkjZKWpmtdi0wKOlF4CJgU1a+FChKGmDsJO0/TLhax8zM5phabdRaKBSiWCw2bH+SPHI3s9yTtD87H/ouftaNmVniHPRmZolz0JuZJc5Bb2aWOAe9mVniHPRmZolz0JuZJc5Bb2aWOAe9mVniHPRmZolz0JuZJc5Bb2aWuGSCvqurC0k1f4AZbdfV1dXkHpuZVaeaF4/kwokTJxr6FMrZvMzEzKyRkhnRm5nZ5Bz0ZmaJc9CbmSWurYO+dLLEmsfXcPyt481uipnZnGnroO871MeBVw/QN9DX7KaYmc2Ztg360skSO4Z2EATbh7Z7VG9myWrboO871Ec5ygCUo+xRvZklqy2Dfnw0P1IeAWCkPOJRvZklK5kbpuLeC+G+91S1bt/CTsrz58O8X930VB55m75vFrjnZyeq35+ZWQ4kE/T60ptV3xk7sPNWRk4MnlE2Mk8cXFyAu7ZVtz+JuK/WVpqZNV4yQV+LbSurC3MzsxQkFfSNfP5MZ2dnw/ZlZjYbyQT9TB9oJqmhD0MzM2u0qq66kbRC0qCkIUnrJ6lfLGm3pEOS9khaNKH+QknHJH29Xg03M7PqTBv0kjqAh4AbgV5gtaTeCas9CDwcEVcAG4EHJtTfDzw9++aamVmtqhnRXw0MRcTRiHgHeAS4acI6vcBT2XJ/Zb2kPwAuAp6YfXPNzKxW1QT9JcDLFd+PZWWVBoBV2fLNwAJJCyXNA/4JWDfVDiTdIakoqVgqlapruZmZVaVed8auA5ZLehZYDgwDo8Dnge9FxLGpNo6IzRFRiIhCT09PnZpkZmZQ3VU3w8ClFd8XZWWnRcQrZCN6SfOBWyLiDUkfBj4m6fPAfOA8Sb+IiHed0DUzs7lRTdDvAy6XdBljAX8bcHvlCpK6gdcjogzcDWwBiIg/r1hnDVBwyJuZNda0UzcRcQq4E9gFHAEejYjDkjZKWpmtdi0wKOlFxk68bpqj9pqZWY3UajcLFQqFKBaLDdufb5gysxRI2h8RhcnqkrkzdirTPRphqnr/J2BmedcWQe+wNrN21pYvHjEzaycOejOzxDnozcwS56A3M0ucg97MLHEOejOzxDnozcwS56A3M0ucg97MLHEOejOzxLVt0G/dupVly5bR0dHBsmXL2Lp1a7ObZGY2J9riWTcTbd26lQ0bNvCtb32Lj370o+zdu5e1a9cCsHr16ia3zsysvtryMcXLli3ja1/7Gtddd93psv7+fu666y6ef/75Od23mdlcmOoxxW0Z9B0dHbz99tuce+65p8tGRka44IILGB0dndN9m5nNhamCvi3n6JcuXcrevXvPKNu7dy9Lly5tUovMzOZOWwb9hg0bWLt2Lf39/YyMjNDf38/atWvZsGFDs5tmZlZ3bXkydvyE61133cWRI0dYunQpmzZt8olYM0tSW87Rm5mlxnP0ZmZtzEFvZpY4B72ZWeIc9GZmiXPQm5klruWuupFUAn7SwF12A8cbuL9Gc//yzf3Lr0b3bXFE9ExW0XJB32iSime7JCkF7l++uX/51Up989SNmVniHPRmZolz0MPmZjdgjrl/+eb+5VfL9K3t5+jNzFLnEb2ZWeIc9GZmiWuroJe0RdJrkp6vKOuS9KSkl7Kfnc1s42xJ+rGk5yQdlFTMynLbx1qOmcZ8VdKQpEOSrmpey6tTy/HKQ//qdbwkfTpb/yVJn25GX86mXsesoX2MiLb5AH8MXAU8X1H2FWB9trwe+HKz2znLPv4Y6J5Qlts+1nLMgD8Bvg8IuAb4r2a3v57HKw/9q8fxArqAo9nPzmy5s9l9q+cxa3Qfm/6X1oSDtGTCP8JB4OJs+WJgsNltnGX/JvtHmOs+VnvMgG8Aqydbr1U/tRyvvPRvtscLWA18o6L8jPWa/anHMWt0H9tq6uYsLoqIn2bL/wtc1MzG1EEAT0jaL+mOrCy1Pp6tP5cAL1esdywra2W1HK889g9q70+r97Mex6yhfWzLVwmeTUSEpLxfb/rRiBiW9FvAk5L+u7IykT6elkB/fLzyJ3fHzCN6eFXSxQDZz9ea3J5ZiYjh7OdrwHeBq0msj5y9P8PApRXrLcrKWlaNxyt3/cvU2p+W7medjllD++igh53A+BnvTwM7mtiWWZH0G5IWjC8DHweeJ6E+Zs7Wn53AX2ZXOlwD/Lzi1+mWM4Pjlav+Vai1P7uAj0vqzK5e+XhW1nR1PGaN7WOzT2w0+CTKVuCnwAhjc2JrgYXAbuAl4N+Brma3cxb9ey8wkH0OAxuy8tz2sZZjxtiVDQ8BPwKeAwrNbn89j1ce+lev4wX8FTCUfT7T7H7NxTFrZB/9CAQzs8R56sbMLHEOejOzxDnozcwS56A3M0ucg97MLHEOejOzxDnozcwS9//e19KcuUbJaAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "\n",
        "# explore gradient boosting number of trees effect on performance\n",
        "from numpy import mean\n",
        "from numpy import std\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.model_selection import RepeatedStratifiedKFold\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from matplotlib import pyplot\n",
        " \n",
        " \n",
        "# get a list of models to evaluate\n",
        "def get_models():\n",
        "\tmodels = dict()\n",
        "\t# define number of trees to consider\n",
        "\tn_trees = [10, 50, 100, 500, 1000, 5000]\n",
        "\tfor n in n_trees:\n",
        "\t\tmodels[str(n)] = GradientBoostingClassifier(n_estimators=n)\n",
        "\treturn models\n",
        " \n",
        "# evaluate a given model using cross-validation\n",
        "def evaluate_model(model, X, y):\n",
        "\t# define the evaluation procedure\n",
        "\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "\t# evaluate the model and collect the results\n",
        "\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "\treturn scores\n",
        " \n",
        "# define dataset\n",
        "X = df\n",
        "y = sxl[\"Target\"]\n",
        "\n",
        "# get the models to evaluate\n",
        "models = get_models()\n",
        "# evaluate the models and store results\n",
        "results, names = list(), list()\n",
        "for name, model in models.items():\n",
        "\t# evaluate the model\n",
        "\tscores = evaluate_model(model, X, y)\n",
        "\t# store the results\n",
        "\tresults.append(scores)\n",
        "\tnames.append(name)\n",
        "\t# summarize the performance along the way\n",
        "\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n",
        "# plot model performance for comparison\n",
        "pyplot.boxplot(results, labels=names, showmeans=True)\n",
        "pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CF19PqYY2YVP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 612
        },
        "outputId": "2c378cd9-1707-467b-bcb3-b5add15117e9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">0.1 0.940 (0.025)\n",
            ">1.1 nan (nan)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:372: FitFailedWarning: \n",
            "30 fits failed out of a total of 30.\n",
            "The score on these train-test partitions for these parameters will be set to nan.\n",
            "If these failures are not expected, you can try to debug them by setting error_score='raise'.\n",
            "\n",
            "Below are more details about the failures:\n",
            "--------------------------------------------------------------------------------\n",
            "30 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py\", line 525, in fit\n",
            "    self._check_params()\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py\", line 317, in _check_params\n",
            "    raise ValueError(\"subsample must be in (0,1] but was %r\" % self.subsample)\n",
            "ValueError: subsample must be in (0,1] but was 1.1\n",
            "\n",
            "  warnings.warn(some_fits_failed_message, FitFailedWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD4CAYAAADiry33AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAQAklEQVR4nO3df6zddX3H8eeLQuemoEBv2EaR1gSzXpGIHrst6yxo5gp/QGC/qDrt0siSDfaPZIHUDFbTsES2mLBuhKXMoVkbQqY2kYiGHzFdWNJToHXlrnhHFFo2uQyJcYy10Pf+uKfscL3tPbWnPe3nPh9Jwzmfz/fc+z6hed5vzzn3nFQVkqR2nTbqASRJx5ehl6TGGXpJapyhl6TGGXpJatzpox5gpkWLFtWSJUtGPYYknVJ27NjxYlWNzbZ30oV+yZIldLvdUY8hSaeUJN8/3J4P3UhS4wy9JDXO0EtS4wy9JDXO0EtS4wy9JDXO0EtS4wy9JDXupPuFKf10khz1bfwsAml+MPSNOFy0kxh0aZ7zoRtJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGDRT6JKuS7EkymeTmWfYvTPJQkl1JHk2yuG/vnUm+mWQiyVNJlgxvfEnSXOYMfZIFwEbgCmAcWJ1kfMZhdwD3VtUlwHrg9r69e4HPV9UyYDnwwjAGlyQNZpAz+uXAZFU9U1X7gS3A1TOOGQce7l1+5NB+7wfC6VX1LYCq+nFVvTKUySVJAxkk9OcDz/Vd39tb67cTuLZ3+RrgzCTnAu8GXk7yT0meSPL53r8Q3iTJ9Um6SbpTU1NHfy8kSYc1rCdjbwJWJnkCWAnsA15n+oNNfr23/0HgXcCamTeuqrurqlNVnbGxsSGNJEmCwUK/D7ig7/ri3tobqur5qrq2qi4F1vXWXmb67P/J3sM+rwFfBd4/lMklSQMZJPTbgYuSLE2yELgO2Np/QJJFSQ59rVuAe/pu+44kh07TPww8dexjS5IGNWfoe2fiNwAPAhPAfVW1O8n6JFf1DrsM2JPkaeA8YEPvtq8z/bDNQ0m+AwT4u6Hfi3nknHPOIcnAf4CjOj4J55xzzojvpaRhysn2wdGdTqe63e6oxzhpnYgP+/YDxaVTT5IdVdWZbc/fjJWkxhl6SWqcoZekxhl6SWqcoZekxhl6SWqcoZekxhl6SWqcoZekxhl6SWqcoZekxhl6SWqcoZekxhl6SWqcoZekxhl6SWqcoZekxhl6SWqcoZekxhl6SWqcoZekxp0+6gF0dOrWs+C2tx//7yGpGYb+FJM//xFVdXy/R0Lddly/haQTyIduJKlxhl6SGmfoJalxhl6SGjdQ6JOsSrInyWSSm2fZvzDJQ0l2JXk0yeIZ+2cl2Zvkr4c1uOY29coUa76xhhf/58VRjyJphOYMfZIFwEbgCmAcWJ1kfMZhdwD3VtUlwHrg9hn7nwO+fezj6mjctesuHv/B49y1865RjyJphAY5o18OTFbVM1W1H9gCXD3jmHHg4d7lR/r3k3wAOA/45rGPq0FNvTLF1ya/RlF8dfKrntVL89ggoT8feK7v+t7eWr+dwLW9y9cAZyY5N8lpwF8CNx3pGyS5Pkk3SXdqamqwyXVEd+26i4N1EICDddCzemkeG9aTsTcBK5M8AawE9gGvA38EPFBVe49046q6u6o6VdUZGxsb0kjz16Gz+QMHDwBw4OABz+qleWyQ0O8DLui7vri39oaqer6qrq2qS4F1vbWXgV8FbkjyPaYfx/9kkr8YxuA6vP6z+UM8q5fmr0HeAmE7cFGSpUwH/jrgY/0HJFkEvFRVB4FbgHsAqurjfcesATpV9ROv2tFw7Xxh5xtn84ccOHiAJ194ckQTSRqlOUNfVa8luQF4EFgA3FNVu5OsB7pVtRW4DLg9STH96po/Po4zaw73X3X/qEeQdBLJ8X6DrKPV6XSq2+2OeoyTVpIT86ZmJ9nfC0lHlmRHVXVm2/M3YyWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYN8ZqxOMkmO69c/++yzj+vXl3RiGfpTzNF+xJ8fCyjJh24kqXGGXpIaZ+glqXGGXpIaZ+glqXGGXpIaZ+glqXEDhT7JqiR7kkwmuXmW/QuTPJRkV5JHkyzurb8vyWNJdvf2fm/Yd0CSdGRzhj7JAmAjcAUwDqxOMj7jsDuAe6vqEmA9cHtv/RXgk1X1HmAV8IUk7xjW8JKkuQ1yRr8cmKyqZ6pqP7AFuHrGMePAw73Ljxzar6qnq+q7vcvPAy8AY8MYXJI0mEFCfz7wXN/1vb21fjuBa3uXrwHOTHJu/wFJlgMLgX//6UaVJP00hvVk7E3AyiRPACuBfcDrhzaT/ALwJeAPqurgzBsnuT5JN0l3ampqSCNJkmCw0O8DLui7vri39oaqer6qrq2qS4F1vbWXAZKcBXwdWFdV/zLbN6iqu6uqU1WdsTEf2ZGkYRok9NuBi5IsTbIQuA7Y2n9AkkVJDn2tW4B7eusLga8w/UTt/cMbW5I0qDlDX1WvATcADwITwH1VtTvJ+iRX9Q67DNiT5GngPGBDb/13gQ8Ba5I82fvzvmHfCUnS4eVke6/yTqdT3W531GM0w/ejl+aHJDuqqjPbnr8ZK0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNGyj0SVYl2ZNkMsnNs+xfmOShJLuSPJpkcd/ep5J8t/fnU8McXpI0tzlDn2QBsBG4AhgHVicZn3HYHcC9VXUJsB64vXfbc4BbgV8GlgO3Jjl7eONLkuYyyBn9cmCyqp6pqv3AFuDqGceMAw/3Lj/St/+bwLeq6qWq+iHwLWDVsY8tSRrUIKE/H3iu7/re3lq/ncC1vcvXAGcmOXfA25Lk+iTdJN2pqalBZ5ckDWBYT8beBKxM8gSwEtgHvD7ojavq7qrqVFVnbGxsSCNJkgBOH+CYfcAFfdcX99beUFXP0zujT/I24Leq6uUk+4DLZtz20WOYV5J0lAY5o98OXJRkaZKFwHXA1v4DkixKcuhr3QLc07v8IPDRJGf3noT9aG9NknSCzBn6qnoNuIHpQE8A91XV7iTrk1zVO+wyYE+Sp4HzgA29274EfI7pHxbbgfW9NUnSCZKqGvUMb9LpdKrb7Y56jGYk4WT7fyxp+JLsqKrObHv+ZqwkNc7QS1LjDL0kNc7QS1LjDL0kNc7QS1LjDL0kNc7QS1LjDL0kNc7QS1LjDL0kNc7QS1LjBnk/ep0Ckhz1nm92Js0Phr4RRlvS4fjQjSQ1ztBLUuMMvSQ1ztBLUuMMvSQ1ztBLUuMMvSQ1ztBLUuMMvSQ1ztBLUuMMvSQ1ztBLUuMGCn2SVUn2JJlMcvMs++9M8kiSJ5LsSnJlb/2MJP+Q5DtJJpLcMuw7IEk6sjlDn2QBsBG4AhgHVicZn3HYZ4H7qupS4Drgb3rrvwP8TFW9F/gA8IdJlgxndEnSIAY5o18OTFbVM1W1H9gCXD3jmALO6l1+O/B83/pbk5wO/CywH/jRMU8tSRrYIKE/H3iu7/re3lq/24BPJNkLPADc2Fu/H/hv4D+AZ4E7quqlYxlYknR0hvVk7Grgi1W1GLgS+FKS05j+18DrwC8CS4HPJHnXzBsnuT5JN0l3ampqSCNJkmCw0O8DLui7vri31m8tcB9AVT0GvAVYBHwM+EZVHaiqF4B/Bjozv0FV3V1VnarqjI2NHf29kCQd1iCh3w5clGRpkoVMP9m6dcYxzwIfAUiyjOnQT/XWP9xbfyvwK8C/DWd0SdIg5gx9Vb0G3AA8CEww/eqa3UnWJ7mqd9hngE8n2QlsBtbU9IeYbgTelmQ30z8w/r6qdh2POyJJml1Otg+V7nQ61e12Rz2GJJ1Skuyoqp94aBz8zVhJap6hl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJatxAoU+yKsmeJJNJbp5l/51JHknyRJJdSa7s27skyWNJdif5TpK3DPMOSJKO7PS5DkiyANgI/AawF9ieZGtVPdV32GeB+6rqb5OMAw8AS5KcDnwZ+P2q2pnkXODA0O+FJOmwBjmjXw5MVtUzVbUf2AJcPeOYAs7qXX478Hzv8keBXVW1E6Cq/quqXj/2sSVJgxok9OcDz/Vd39tb63cb8Ikke5k+m7+xt/5uoJI8mOTxJH862zdIcn2SbpLu1NTUUd0BzW7z5s1cfPHFLFiwgIsvvpjNmzePeiRJIzKsJ2NXA1+sqsXAlcCXkpzG9ENDK4CP9/57TZKPzLxxVd1dVZ2q6oyNjQ1ppPlr8+bNrFu3jjvvvJNXX32VO++8k3Xr1hl7aZ4aJPT7gAv6ri/urfVbC9wHUFWPAW8BFjF99v/tqnqxql5h+mz//cc6tI5sw4YNbNq0icsvv5wzzjiDyy+/nE2bNrFhw4ZRjyZpBAYJ/XbgoiRLkywErgO2zjjmWeAjAEmWMR36KeBB4L1Jfq73xOxK4Cl0XE1MTLBixYo3ra1YsYKJiYkRTSRplOYMfVW9BtzAdLQnmH51ze4k65Nc1TvsM8Cnk+wENgNratoPgb9i+ofFk8DjVfX143FH9P+WLVvGtm3b3rS2bds2li1bNqKJJI3SnC+vBKiqB5h+2KV/7c/6Lj8F/Nphbvtlpl9iqRNk3bp1rF27lk2bNrFixQq2bdvG2rVrfehGmqcGCr1OLatXrwbgxhtvZGJigmXLlrFhw4Y31iXNL6mqUc/wJp1Op7rd7qjHkKRTSpIdVdWZbc/3upGkxhl6SWqcoZekxhl6SWqcoZekxp10r7pJMgV8f9RzNGQR8OKoh5AOw7+fw3NhVc36ZmEnXeg1XEm6h3vJlTRq/v08MXzoRpIaZ+glqXGGvn13j3oA6Qj8+3kC+Bi9JDXOM3pJapyhl6TGGfpGJFmVZE+SySQ3z7L/od4HtL+W5LdHMaPmpyT3JHkhyb8eZv+XkjyW5H+T3HSi55sPDH0DkiwANgJXAOPA6iTjMw57FlgD/OOJnU7ii8CqI+y/BPwJcMcJmWYeMvRtWA5MVtUzVbUf2AJc3X9AVX2vqnYBB0cxoOavqvo20zE/3P4LVbUdOHDipppfDH0bzgee67u+t7cmSYZeklpn6NuwD7ig7/ri3pokGfpGbAcuSrI0yULgOmDriGeSdJLwN2MbkeRK4AvAAuCeqtqQZD3QraqtST4IfAU4G3gV+M+qes/oJtZ8kWQzcBnTb0n8A+BW4AyAqroryc8DXeAspl8s8GNgvKp+NJKBG2ToJalxPnQjSY0z9JLUOEMvSY0z9JLUOEMvSY0z9JLUOEMvSY37P9EITaraZRbmAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "\n",
        "# get a list of models to evaluate\n",
        "def get_models():\n",
        "\tmodels = dict()\n",
        "\t# explore sample ratio from 10% to 100% in 10% increments\n",
        "\tfor i in (0.1, 1.1, 0.1):\n",
        "\t\tkey = '%.1f' % i\n",
        "\t\tmodels[key] = GradientBoostingClassifier(subsample=i, n_estimators=1000)\n",
        "\treturn models\n",
        " \n",
        "# evaluate a given model using cross-validation\n",
        "def evaluate_model(model, X, y):\n",
        "\t# define the evaluation procedure\n",
        "\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "\t# evaluate the model and collect the results\n",
        "\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "\treturn scores\n",
        " \n",
        "# define dataset\n",
        "X = df\n",
        "y = sxl[\"Target\"]\n",
        "\n",
        "# get the models to evaluate\n",
        "models = get_models()\n",
        "# evaluate the models and store results\n",
        "results, names = list(), list()\n",
        "for name, model in models.items():\n",
        "\t# evaluate the model\n",
        "\tscores = evaluate_model(model, X, y)\n",
        "\t# store the results\n",
        "\tresults.append(scores)\n",
        "\tnames.append(name)\n",
        "\t# summarize the performance along the way\n",
        "\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n",
        "# plot model performance for comparison\n",
        "pyplot.boxplot(results, labels=names, showmeans=True)\n",
        "pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "syMcJGhb2YX6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "outputId": "bb73484d-2164-4597-d254-b756847e205e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">1 0.963 (0.019)\n",
            ">2 0.935 (0.094)\n",
            ">3 0.953 (0.047)\n",
            ">4 0.916 (0.098)\n",
            ">5 0.898 (0.109)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-19-42d68f428fb7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m         \u001b[0;31m# evaluate the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m         \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m         \u001b[0;31m# store the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m         \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-19-42d68f428fb7>\u001b[0m in \u001b[0;36mevaluate_model\u001b[0;34m(model, X, y)\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0mcv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRepeatedStratifiedKFold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_repeats\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0;31m# evaluate the model and collect the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'accuracy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mscores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_val_score\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, error_score)\u001b[0m\n\u001b[1;32m    518\u001b[0m         \u001b[0mfit_params\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    519\u001b[0m         \u001b[0mpre_dispatch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpre_dispatch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 520\u001b[0;31m         \u001b[0merror_score\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merror_score\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    521\u001b[0m     )\n\u001b[1;32m    522\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcv_results\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"test_score\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_validate\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score, return_estimator, error_score)\u001b[0m\n\u001b[1;32m    281\u001b[0m             \u001b[0merror_score\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merror_score\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m         )\n\u001b[0;32m--> 283\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m     )\n\u001b[1;32m    285\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1054\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1055\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1056\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1057\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1058\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    933\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    934\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 935\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    936\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    937\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    540\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    541\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 542\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    543\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mCfTimeoutError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    428\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 430\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_condition\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    431\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mCANCELLED\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCANCELLED_AND_NOTIFIED\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    294\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "\n",
        "# get a list of models to evaluate\n",
        "def get_models():\n",
        "\tmodels = dict()\n",
        "\t# explore number of features from 1 to 20\n",
        "\tfor i in range(1,21):\n",
        "\t\tmodels[str(i)] = GradientBoostingClassifier(max_features=i, subsample=0.1, n_estimators=1000)\n",
        "\treturn models\n",
        " \n",
        "# evaluate a given model using cross-validation\n",
        "def evaluate_model(model, X, y):\n",
        "\t# define the evaluation procedure\n",
        "\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "\t# evaluate the model and collect the results\n",
        "\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "\treturn scores\n",
        " \n",
        "# define dataset\n",
        "X = df\n",
        "y = sxl[\"Target\"]\n",
        "# get the models to evaluate\n",
        "models = get_models()\n",
        "# evaluate the models and store results\n",
        "results, names = list(), list()\n",
        "for name, model in models.items():\n",
        "\t# evaluate the model\n",
        "\tscores = evaluate_model(model, X, y)\n",
        "\t# store the results\n",
        "\tresults.append(scores)\n",
        "\tnames.append(name)\n",
        "\t# summarize the performance along the way\n",
        "\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n",
        "# plot model performance for comparison\n",
        "pyplot.boxplot(results, labels=names, showmeans=True)\n",
        "pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2yQ8aIwf4HNr"
      },
      "outputs": [],
      "source": [
        " \n",
        "# get a list of models to evaluate\n",
        "def get_models():\n",
        "\tmodels = dict()\n",
        "\t# define learning rates to explore\n",
        "\tfor i in [0.0001, 0.001, 0.01, 0.1, 1.0]:\n",
        "\t\tkey = '%.4f' % i\n",
        "\t\tmodels[key] = GradientBoostingClassifier(learning_rate=i, max_features=i, subsample=0.1, n_estimators=1000)\n",
        "\treturn models\n",
        " \n",
        "# evaluate a given model using cross-validation\n",
        "def evaluate_model(model, X, y):\n",
        "\t# define the evaluation procedure\n",
        "\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "\t# evaluate the model and collect the results\n",
        "\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "\treturn scores\n",
        " \n",
        "# define dataset\n",
        "X = df\n",
        "y = sxl[\"Target\"]\n",
        "# get the models to evaluate\n",
        "models = get_models()\n",
        "# evaluate the models and store results\n",
        "results, names = list(), list()\n",
        "for name, model in models.items():\n",
        "\t# evaluate the model\n",
        "\tscores = evaluate_model(model, X, y)\n",
        "\t# store the results\n",
        "\tresults.append(scores)\n",
        "\tnames.append(name)\n",
        "\t# summarize the performance along the way\n",
        "\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n",
        "# plot model performance for comparison\n",
        "pyplot.boxplot(results, labels=names, showmeans=True)\n",
        "pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nXAFYhA74Tdf"
      },
      "outputs": [],
      "source": [
        "# get a list of models to evaluate\n",
        "def get_models():\n",
        "\tmodels = dict()\n",
        "\t# define max tree depths to explore between 1 and 10\n",
        "\tfor i in range(1,11):\n",
        "\t\tmodels[str(i)] = GradientBoostingClassifier(max_depth=i, learning_rate=i, max_features=i, subsample=0.1, n_estimators=1000)\n",
        "\treturn models\n",
        " \n",
        "# evaluate a given model using cross-validation\n",
        "def evaluate_model(model, X, y):\n",
        "\t# define the evaluation procedure\n",
        "\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "\t# evaluate the model and collect the results\n",
        "\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "\treturn scores\n",
        " \n",
        "# define dataset\n",
        "X = df\n",
        "y = sxl[\"Target\"]\n",
        "# get the models to evaluate\n",
        "models = get_models()\n",
        "# evaluate the models and store results\n",
        "results, names = list(), list()\n",
        "for name, model in models.items():\n",
        "\t# evaluate the model\n",
        "\tscores = evaluate_model(model, X, y)\n",
        "\t# store the results\n",
        "\tresults.append(scores)\n",
        "\tnames.append(name)\n",
        "\t# summarize the performance along the way\n",
        "\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n",
        "# plot model performance for comparison\n",
        "pyplot.boxplot(results, labels=names, showmeans=True)\n",
        "pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vK6xPJUY4ZBH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e2b706d-775a-43e3-de40-6af24a3c9707"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best: 0.969877 using {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.908367 (0.000610) with: {'learning_rate': 0.001, 'max_depth': 3, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.908367 (0.000610) with: {'learning_rate': 0.001, 'max_depth': 7, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.908367 (0.000610) with: {'learning_rate': 0.001, 'max_depth': 9, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.960439 (0.005620) with: {'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.969413 (0.005733) with: {'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.969877 (0.005482) with: {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.959385 (0.014274) with: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.693676 (0.179044) with: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.674639 (0.170951) with: {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 500, 'subsample': 0.1}\n"
          ]
        }
      ],
      "source": [
        "# example of grid searching key hyperparameters for gradient boosting on a classification dataset\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import RepeatedStratifiedKFold\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "# define dataset\n",
        "X = Xt_train\n",
        "y = Yt_train\n",
        "# define the model with default hyperparameters\n",
        "model = GradientBoostingClassifier()\n",
        "# define the grid of values to search\n",
        "grid = dict()\n",
        "grid['n_estimators'] = [ 500]\n",
        "grid['learning_rate'] = [ 0.001, 0.01, 0.1]\n",
        "grid['subsample'] = [0.1]\n",
        "grid['max_depth'] = [3, 7, 9]\n",
        "# define the evaluation procedure\n",
        "cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "# define the grid search procedure\n",
        "grid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy')\n",
        "# execute the grid search\n",
        "grid_result = grid_search.fit(X, y)\n",
        "# summarize the best score and configuration\n",
        "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
        "# summarize all scores that were evaluated\n",
        "means = grid_result.cv_results_['mean_test_score']\n",
        "stds = grid_result.cv_results_['std_test_score']\n",
        "params = grid_result.cv_results_['params']\n",
        "for mean, stdev, param in zip(means, stds, params):\n",
        "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Feature Importance\n",
        "---\n",
        "\n",
        "https://scikit-learn.org/stable/modules/permutation_importance.html#permutation-importance\n",
        "https://scikit-learn.org/stable/auto_examples/ensemble/plot_gradient_boosting_regression.html\n"
      ],
      "metadata": {
        "id": "M2ghpAZrs9za"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# load library\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "# Best: 0.969877 using {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 500, 'subsample': 0.1}\n",
        "xgbc = GradientBoostingClassifier( learning_rate=0.01, subsample=0.1, n_estimators=500, max_depth= 9)\n",
        "\n",
        "# fit the predictor and target\n",
        "xgbc.fit(Xt_train, Yt_train)\n",
        "\n",
        "# predict\n",
        "gbm_predict = xgbc.predict(Xt_test)# check performance"
      ],
      "metadata": {
        "id": "UMGW1OYYt0Ea"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score\n",
        "# accuracy: (tp + tn) / (p + n)\n",
        "accuracy = accuracy_score(Yt_test,gbm_predict)\n",
        "print('Accuracy: %f' % accuracy)\n",
        "recall= recall_score(Yt_test,gbm_predict)\n",
        "print(\"Recall %f\" % recall)\n",
        "precision= precision_score(Yt_test,gbm_predict)\n",
        "print(\"precision %f\" % precision)\n",
        "# f1: 2 tp / (2 tp + fp + fn)\n",
        "f1 = f1_score(Yt_test,gbm_predict)\n",
        "print('F1 score: %f' % f1)\n",
        "cm= confusion_matrix(Yt_test,gbm_predict)\n",
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score\n",
        "print('ROCAUC score:',roc_auc_score(Yt_test, gbm_predict))\n",
        "print('Accuracy score:',accuracy_score(Yt_test, gbm_predict))\n",
        "print('F1 score:',f1_score(Yt_test, gbm_predict))\n",
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score, cohen_kappa_score\n",
        "# kappa\n",
        "kappa = cohen_kappa_score(Yt_test, gbm_predict)\n",
        "print('Cohens kappa: %f' % kappa)\n",
        "# ROC AUC\n",
        "auc = roc_auc_score(Yt_test, gbm_predict)\n",
        "print('ROC AUC: %f' % auc)\n",
        "# confusion matrix\n",
        "matrix = confusion_matrix(Yt_test, gbm_predict)\n",
        "print(matrix)\n",
        "from sklearn.model_selection import cross_val_score\n",
        "scores = cross_val_score(xgbc,Xt_train, Yt_train, cv=10)\n",
        "\n",
        "print(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))\n",
        "print(scores.mean())\n",
        "print(scores.std())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vHkN3FI5RBq3",
        "outputId": "9d9f80f7-cad9-482f-e5b8-513e53ccb0d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.967660\n",
            "Recall 0.717277\n",
            "precision 0.931973\n",
            "F1 score: 0.810651\n",
            "ROCAUC score: 0.8558423228738419\n",
            "Accuracy score: 0.9676604345629105\n",
            "F1 score: 0.8106508875739645\n",
            "Cohens kappa: 0.793298\n",
            "ROC AUC: 0.855842\n",
            "[[1778   10]\n",
            " [  54  137]]\n",
            "0.97 accuracy with a standard deviation of 0.00\n",
            "0.9697924248809204\n",
            "0.003070413774559095\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save Model Using joblib\n",
        "import pandas\n",
        "from sklearn import model_selection\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import joblib\n",
        "\n",
        "%cd /content/\n",
        "# save the model to disk\n",
        "filename = 'sexualsGBM_HPTFInal_UMACCS_model.pkl'\n",
        "joblib.dump(xgbc, filename)\n",
        " \n",
        "# some time later...\n",
        " \n",
        "# load the model from disk\n",
        "loaded_model = joblib.load(filename)\n",
        "result = loaded_model.score(Xt_test, Yt_test)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4eNM4vxqRZOc",
        "outputId": "0ef27303-9315-40ae-c6b5-b791b06097ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "0.9676604345629105\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "342JsK1QSDqc"
      },
      "outputs": [],
      "source": [
        "!cp 'sexualsGBM_HPTFInal_UMACCS_model.pkl' /content/drive/MyDrive/PhD/XGBoost_MACCS"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Pwfm3p4cSDfJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cc3bb993-7090-4b72-ca48-4408eba3d1c6",
        "id": "BvxIzumg6XTw"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "0.9696816574027286\n"
          ]
        }
      ],
      "source": [
        "# Save Model Using joblib\n",
        "import pandas\n",
        "from sklearn import model_selection\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import joblib\n",
        "\n",
        "%cd /content/\n",
        "# save the model to disk\n",
        "filename = 'sexualsXGBoostHPTFInal_UMACCS_model.sav'\n",
        "joblib.dump(xgbc, filename)\n",
        " \n",
        "# some time later...\n",
        " \n",
        "# load the model from disk\n",
        "loaded_model = joblib.load(filename)\n",
        "result = loaded_model.score(Xt_test, Yt_test)\n",
        "print(result)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NzWrzJOx6XTy"
      },
      "outputs": [],
      "source": [
        "!cp 'sexualsXGBoostHPTFInal_UMACCS_model.sav' /content/drive/MyDrive/PhD/XGBoost_MACCS"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e6b7e39-62d4-4829-8198-58b434c7e13d",
        "id": "IAbAk-ol6XTz"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/PhD/XGBoost_MACCS\n",
            "sexualsXGBoostHPTFInal_UMACCS_model.sav  sxl_UnderMACCS_XGB_HPT_FeatureImp.csv\n",
            "sexualsXGBoost_UMACCS_model.sav\n"
          ]
        }
      ],
      "source": [
        "###Import model\n",
        "#Optional: move to the desired location:\n",
        "%cd /content/drive/MyDrive/PhD/XGBoost_MACCS\n",
        "!ls '/content/drive/MyDrive/PhD/XGBoost_MACCS'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f71395e3-75bc-486d-f5c1-be3ad748a8cc",
        "id": "ZYhZB_sr6XTz"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9696816574027286\n"
          ]
        }
      ],
      "source": [
        "import pandas\n",
        "from sklearn import model_selection\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import joblib\n",
        "\n",
        "# load the model from disk\n",
        "loaded_model = joblib.load('/content/drive/MyDrive/PhD/XGBoost_MACCS/sexualsXGBoostHPTFInal_UMACCS_model.sav')\n",
        "result = loaded_model.score(Xt_test, Yt_test)\n",
        "print(result)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iDuz0h4axxU8"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "scores = cross_val_score(xgbc,Xt_train, Yt_train, cv=10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c9acb268-8235-452e-de09-af7c836984e1",
        "id": "_xhXMAibxxVV"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.97 accuracy with a standard deviation of 0.00\n",
            "0.969035008747398\n",
            "0.004699823778063684\n"
          ]
        }
      ],
      "source": [
        "print(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))\n",
        "print(scores.mean())\n",
        "print(scores.std())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ee7b67f2-3d76-4102-97dc-58ba5fc5b957",
        "id": "snKWC0MRxxVW"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.969682\n",
            "Recall 0.712042\n",
            "precision 0.964539\n",
            "F1 score: 0.819277\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1783,    5],\n",
              "       [  55,  136]])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score\n",
        "# accuracy: (tp + tn) / (p + n)\n",
        "accuracy = accuracy_score(Yt_test,xgbc_predict)\n",
        "print('Accuracy: %f' % accuracy)\n",
        "recall= recall_score(Yt_test,xgbc_predict)\n",
        "print(\"Recall %f\" % recall)\n",
        "precision= precision_score(Yt_test,xgbc_predict)\n",
        "print(\"precision %f\" % precision)\n",
        "# f1: 2 tp / (2 tp + fp + fn)\n",
        "f1 = f1_score(Yt_test,xgbc_predict)\n",
        "print('F1 score: %f' % f1)\n",
        "cm= confusion_matrix(Yt_test,xgbc_predict)\n",
        "cm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "08d7d6ca-84b3-42ef-9caa-9b4e9e504176",
        "id": "T9KWsOXIxxVX"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ROCAUC score: 0.854622732117549\n",
            "Accuracy score: 0.9696816574027286\n",
            "F1 score: 0.8192771084337349\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score\n",
        "print('ROCAUC score:',roc_auc_score(Yt_test, xgbc_predict))\n",
        "print('Accuracy score:',accuracy_score(Yt_test, xgbc_predict))\n",
        "print('F1 score:',f1_score(Yt_test,xgbc_predict))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bc1e9c8d-062d-4462-affa-0490d791937e",
        "id": "d-GlDRNOxxVY"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cohens kappa: 0.803139\n",
            "ROC AUC: 0.854623\n",
            "[[1783    5]\n",
            " [  55  136]]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score, cohen_kappa_score\n",
        "# kappa\n",
        "kappa = cohen_kappa_score(Yt_test, xgbc_predict)\n",
        "print('Cohens kappa: %f' % kappa)\n",
        "# ROC AUC\n",
        "auc = roc_auc_score(Yt_test, xgbc_predict)\n",
        "print('ROC AUC: %f' % auc)\n",
        "# confusion matrix\n",
        "matrix = confusion_matrix(Yt_test, xgbc_predict)\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d59f854f-364a-4acd-997b-8b07de8fa5e2",
        "id": "ipykFal2xxVY"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Set: 1979\n",
            "0    1788\n",
            "1     191\n",
            "Name: Target, dtype: int64\n",
            "[[1783    5]\n",
            " [  55  136]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"Test Set: {len(Xt_test)}\")\n",
        "print(Yt_test.value_counts())\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = (35,10)"
      ],
      "metadata": {
        "id": "BTew6r1-ywv5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# feature importance\n",
        "import matplotlib.pyplot as pyplot\n",
        "print(xgbc.feature_importances_)\n",
        "# plot\n",
        "pyplot.bar(range(len(xgbc.feature_importances_)), xgbc.feature_importances_)\n",
        "plt.xticks([x for x in range(len(xgbc.feature_importances_))], rotation=90)\n",
        "pyplot.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Mm2xmEwV0YDM",
        "outputId": "9d1bc18f-f353-4af6-8266-e6ad4ca7f18c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
            " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
            " 1.60067016e-03 0.00000000e+00 0.00000000e+00 3.85411192e-03\n",
            " 0.00000000e+00 6.56003248e-07 0.00000000e+00 0.00000000e+00\n",
            " 0.00000000e+00 1.16449384e-03 0.00000000e+00 4.35466444e-03\n",
            " 0.00000000e+00 3.80332941e-05 1.40204549e-03 2.47815232e-03\n",
            " 9.17889844e-04 1.14510255e-02 1.02527525e-03 2.80960176e-03\n",
            " 1.27872590e-03 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
            " 5.26862507e-04 6.74367060e-04 1.09410521e-03 0.00000000e+00\n",
            " 6.68438278e-03 2.96121904e-03 8.42071328e-03 1.18078733e-04\n",
            " 5.34619865e-05 6.07827163e-03 7.48060805e-03 4.76812691e-03\n",
            " 0.00000000e+00 2.62694491e-03 5.43326919e-03 7.57967848e-03\n",
            " 1.59729755e-05 6.85055886e-04 2.44441548e-03 3.03395276e-04\n",
            " 4.60532819e-03 1.42197632e-02 7.52449172e-03 1.86800751e-04\n",
            " 2.82460450e-03 6.27484646e-03 3.48738068e-04 3.32711549e-03\n",
            " 4.19012990e-04 1.17313820e-04 1.51820213e-02 3.98571578e-03\n",
            " 3.70205221e-03 8.37169855e-03 5.66371466e-03 8.00179626e-04\n",
            " 3.03205665e-03 2.31507258e-03 1.73609263e-04 1.62762188e-03\n",
            " 6.22661165e-03 1.07419676e-03 6.33419721e-03 8.12289994e-03\n",
            " 1.94460326e-03 8.49961495e-03 6.40658610e-03 7.77632792e-03\n",
            " 9.23594574e-03 3.76233603e-03 7.65942340e-03 5.36306213e-03\n",
            " 9.17762308e-03 5.72605003e-03 5.25414315e-03 4.16581630e-03\n",
            " 3.07475506e-03 6.88410316e-03 8.82144580e-03 7.42591914e-03\n",
            " 4.58249281e-03 7.42240658e-03 3.87384783e-03 8.57437571e-03\n",
            " 9.23632191e-03 8.22664765e-03 7.23358466e-03 8.02793248e-03\n",
            " 6.15362373e-03 1.67364767e-02 6.73566486e-04 1.78697587e-02\n",
            " 8.30962218e-03 9.47825535e-03 6.90943921e-03 2.80909688e-03\n",
            " 6.16383626e-03 5.99183380e-03 5.28907737e-03 1.20887163e-02\n",
            " 5.82516021e-03 7.56543245e-03 9.21745757e-03 6.56455118e-03\n",
            " 6.47356356e-03 2.13734120e-02 2.34484973e-03 2.42436212e-02\n",
            " 8.04808447e-03 1.75587024e-03 4.13322159e-03 3.41876972e-03\n",
            " 8.97754091e-03 9.89243506e-03 7.39957780e-03 2.53088493e-03\n",
            " 7.27502345e-03 5.13615734e-03 3.27240851e-03 1.79128288e-02\n",
            " 1.08335840e-02 7.95349168e-03 5.00907375e-03 8.00947992e-03\n",
            " 5.59818833e-03 5.48244221e-03 5.25115857e-03 5.46064861e-03\n",
            " 6.48485470e-03 6.81573427e-03 3.15198295e-03 2.70461201e-03\n",
            " 8.57915914e-03 2.96679922e-02 4.51681293e-03 2.91953499e-03\n",
            " 1.08060333e-02 9.34976084e-03 7.58992515e-03 9.41005513e-03\n",
            " 7.95963643e-03 1.74803739e-02 8.42529860e-03 6.64818174e-03\n",
            " 9.54627478e-03 3.48066275e-03 5.88007372e-03 9.93916825e-03\n",
            " 8.63246475e-03 2.76328141e-03 3.17761066e-05 2.72799935e-04\n",
            " 1.29536401e-02 1.56181413e-12 1.33418386e-01]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2520x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "imp= pd.DataFrame(xgbc.feature_importances_)\n",
        "f_imp= imp.set_axis(['Score'], axis=1, inplace=False)\n",
        "f_imp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "dbMm6DEE2PcC",
        "outputId": "e64f9339-5bb9-49f6-a995-1c15b0206225"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Score\n",
              "0    0.000000e+00\n",
              "1    0.000000e+00\n",
              "2    0.000000e+00\n",
              "3    0.000000e+00\n",
              "4    0.000000e+00\n",
              "..            ...\n",
              "162  3.177611e-05\n",
              "163  2.727999e-04\n",
              "164  1.295364e-02\n",
              "165  1.561814e-12\n",
              "166  1.334184e-01\n",
              "\n",
              "[167 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a8475308-7a4a-4405-af6f-6d8ac885cf29\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>162</th>\n",
              "      <td>3.177611e-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>163</th>\n",
              "      <td>2.727999e-04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>164</th>\n",
              "      <td>1.295364e-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>165</th>\n",
              "      <td>1.561814e-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>166</th>\n",
              "      <td>1.334184e-01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>167 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a8475308-7a4a-4405-af6f-6d8ac885cf29')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a8475308-7a4a-4405-af6f-6d8ac885cf29 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a8475308-7a4a-4405-af6f-6d8ac885cf29');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##\n",
        "from google.colab import files\n",
        "\n",
        "f_imp.to_csv('sxl_UnderMACCS_XGB_HPT_FeatureImp.csv', encoding = 'utf-8-sig') \n",
        "files.download('sxl_UnderMACCS_XGB_HPT_FeatureImp.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "pHZQE1pP3uEI",
        "outputId": "69ac7677-aa40-45f2-dbdf-4d8aa389fe2e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_b6208764-46e0-4687-8763-9ecdf8cf285c\", \"sxl_UnderX_MFP.csv\", 4005039)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!cp 'sxl_UnderMACCS_XGB_HPT_FeatureImp.csv' /content/drive/MyDrive/PhD/XGBoost_MACCS"
      ],
      "metadata": {
        "id": "GUJ4LMk44X-x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Decision Boundary"
      ],
      "metadata": {
        "id": "l04k910kuG41"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "s150q6HT4HRt"
      },
      "outputs": [],
      "source": [
        " #### plotting  trail             https://scikit-learn.org/stable/auto_examples/ensemble/plot_voting_decision_regions.html#sphx-glr-auto-examples-ensemble-plot-voting-decision-regions-py\n",
        "from itertools import product\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn import datasets\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "\n",
        "# Loading some example data\n",
        "iris = datasets.load_iris()\n",
        "X = iris.data[:, [0, 2]]\n",
        "y = iris.target\n",
        "\n",
        "# Training classifiers\n",
        "clf1 = DecisionTreeClassifier(max_depth=4)\n",
        "clf2 = KNeighborsClassifier(n_neighbors=7)\n",
        "clf3 = SVC(gamma=0.1, kernel=\"rbf\", probability=True)\n",
        "eclf = VotingClassifier(\n",
        "    estimators=[(\"dt\", clf1), (\"knn\", clf2), (\"svc\", clf3)],\n",
        "    voting=\"soft\",\n",
        "    weights=[2, 1, 2],\n",
        ")\n",
        "\n",
        "clf1.fit(X, y)\n",
        "clf2.fit(X, y)\n",
        "clf3.fit(X, y)\n",
        "eclf.fit(X, y)\n",
        "\n",
        "# Plotting decision regions\n",
        "x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n",
        "y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n",
        "xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1), np.arange(y_min, y_max, 0.1))\n",
        "\n",
        "f, axarr = plt.subplots(2, 2, sharex=\"col\", sharey=\"row\", figsize=(10, 8))\n",
        "\n",
        "for idx, clf, tt in zip(\n",
        "    product([0, 1], [0, 1]),\n",
        "    [clf1, clf2, clf3, eclf],\n",
        "    [\"Decision Tree (depth=4)\", \"KNN (k=7)\", \"Kernel SVM\", \"Soft Voting\"],\n",
        "):\n",
        "\n",
        "    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n",
        "    Z = Z.reshape(xx.shape)\n",
        "\n",
        "    axarr[idx[0], idx[1]].contourf(xx, yy, Z, alpha=0.4)\n",
        "    axarr[idx[0], idx[1]].scatter(X[:, 0], X[:, 1], c=y, s=20, edgecolor=\"k\")\n",
        "    axarr[idx[0], idx[1]].set_title(tt)\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Testing PRB diverse molecules\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "fRdXx_gPgGve"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# load the model from disk\n",
        "import joblib\n",
        "loaded_model = joblib.load('/content/drive/MyDrive/PhD/XGBoost_MACCS/sexualsXGBoostHPTFInal_UMACCS_model.sav')\n",
        "result = loaded_model.score(Xt_test, Yt_test)\n",
        "print(result)\n",
        "# predict\n",
        "xgb_predict =loaded_model.predict(Xt_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dgqIYv6tC9wg",
        "outputId": "8c0ea909-df09-4ea0-961f-38e1828a98dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9696816574027286\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "scores = cross_val_score(loaded_model,Xt_train, Yt_train, cv=10)"
      ],
      "metadata": {
        "id": "6GeWQ5ptgq2J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"%0.4f accuracy with a standard deviation of %0.4f\" % (scores.mean(), scores.std()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bec66c30-623b-42f0-8603-77fedc1678a4",
        "id": "Jez9PqsFgq2J"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9687 accuracy with a standard deviation of 0.0044\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score\n",
        "# accuracy: (tp + tn) / (p + n)\n",
        "accuracy = accuracy_score(Yt_test,xgb_predict)\n",
        "print('Accuracy: %f' % accuracy)\n",
        "recall= recall_score(Yt_test,xgb_predict)\n",
        "print(\"Recall %f\" % recall)\n",
        "precision= precision_score(Yt_test,xgb_predict)\n",
        "print(\"precision %f\" % precision)\n",
        "# f1: 2 tp / (2 tp + fp + fn)\n",
        "f1 = f1_score(Yt_test,xgb_predict)\n",
        "print('F1 score: %f' % f1)\n",
        "cm= confusion_matrix(Yt_test,xgb_predict)\n",
        "cm"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75418fc2-6860-4606-a9f2-b0efa75cf212",
        "id": "5u6f9cizgq2K"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.969682\n",
            "Recall 0.712042\n",
            "precision 0.964539\n",
            "F1 score: 0.819277\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1783,    5],\n",
              "       [  55,  136]])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score\n",
        "print('ROCAUC score:',roc_auc_score(Yt_test, xgb_predict))\n",
        "print('Accuracy score:',accuracy_score(Yt_test, xgb_predict))\n",
        "print('F1 score:',f1_score(Yt_test, xgb_predict))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "338b4f42-ff67-4318-a4a6-8b759c39e256",
        "id": "BWw4OTG7gq2K"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ROCAUC score: 0.854622732117549\n",
            "Accuracy score: 0.9696816574027286\n",
            "F1 score: 0.8192771084337349\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score, cohen_kappa_score\n",
        "# kappa\n",
        "kappa = cohen_kappa_score(Yt_test, xgb_predict)\n",
        "print('Cohens kappa: %f' % kappa)\n",
        "# ROC AUC\n",
        "auc = roc_auc_score(Yt_test, xgb_predict)\n",
        "print('ROC AUC: %f' % auc)\n",
        "# confusion matrix\n",
        "matrix = confusion_matrix(Yt_test, xgb_predict)\n",
        "print(matrix)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7e3526fd-0cc0-4f63-ca05-752a4b8ba188",
        "id": "EMTMRAZCgq2K"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cohens kappa: 0.803139\n",
            "ROC AUC: 0.854623\n",
            "[[1783    5]\n",
            " [  55  136]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Test Set: {len(Xt_test)}\")\n",
        "print(Yt_test.value_counts())\n",
        "print(matrix)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "17d63506-e9e7-48e0-fcee-db15d68a510e",
        "id": "Ky15xDY8gq2K"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Set: 1979\n",
            "0    1788\n",
            "1     191\n",
            "Name: Target, dtype: int64\n",
            "[[1783    5]\n",
            " [  55  136]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###Import model\n",
        "#Optional: move to the desired location:\n",
        "%cd /content/drive/MyDrive/PhD/Asxl_undersmpl_MFP/PBR test set\n",
        "!ls '/content/drive/MyDrive/PhD/Asxl_undersmpl_MFP/PBR test set'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JV2Moun9gOr-",
        "outputId": "7e6647b8-4e05-4449-8d6e-d3caf2af9b22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/PhD/Asxl_undersmpl_MFP/PBR test set\n",
            "PRBdata.csv  PRB_test_set2.csv\tPRB_test_set.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "prb= pd.read_csv(\"PRB_test_set2.csv\", sep= \";\")\n",
        "prb= prb.dropna()"
      ],
      "metadata": {
        "id": "aOneX6-SgOzL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "prb"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "2YYtZly3gPFn",
        "outputId": "8884c33d-2744-429d-bf7b-19276dc6a1f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Compound ID                                             SMILES pLDH2 µM  \\\n",
              "0     MMV000008                  CCN(CC)CCCC(C)Nc1ccnc2cc(Cl)ccc12    85,78   \n",
              "2     MMV000043  COc1cc(C)c2c(Oc3cccc(c3)C(F)(F)F)c(OC)cc(NC(C)...    56,47   \n",
              "3     MMV000051  CCC[C@@H]1C[C@H](N(C)C1)C(=O)N[C@H]([C@H](C)Cl...    72,93   \n",
              "4     MMV000059  O1C(=CC=C1C2=CC=C(C(=N)NOC)C=C2)C3=CC=C(C(=N)N...    -3,01   \n",
              "5     MMV000725  ClC3=C(OCC(O)C[N]1[C](=N)[N](CCN(CC)CC)C2=C1C=...     95,4   \n",
              "..          ...                                                ...      ...   \n",
              "395   MMV690653  FC3=C2N=C(N(C1=C(OC)C=CC(=C1)C(F)(F)F)[C@H](C2...     22,9   \n",
              "396   MMV690706  ONC(=O)C1(CS(=O)(=O)c2ccc(Oc3ccc(Cl)cc3)cc2)CC...    28,12   \n",
              "397   MMV811071                        CN(C)CCNC(=O)c1cccc2cccnc12     9,84   \n",
              "398   MMV831201  FC(F)(C1N2N=CC(C(NCC(C=C3)=CC=C3OC)=O)=C2NC(C(...    37,21   \n",
              "399   MMV975972                    NC1=CC(=NNC1=O)c2nc3ccccc3[nH]2    31,47   \n",
              "\n",
              "    Luciferase assay1µM ATP assay1µM PrestoBlue1µM  Sexual hit  \\\n",
              "0                 29,65            0         16,93           0   \n",
              "2                     0            0         47,86           1   \n",
              "3                     0            0         10,27           0   \n",
              "4                     0         0,62         11,76           0   \n",
              "5                     0        82,19             0           1   \n",
              "..                  ...          ...           ...         ...   \n",
              "395                   0            0         11,08           0   \n",
              "396                2,48            0         22,62           0   \n",
              "397                   0            0             0           0   \n",
              "398                   0         2,93             0           0   \n",
              "399                1,36          5,5         28,32           1   \n",
              "\n",
              "    Luciferase assay Unnamed: 8 ATP assay Unnamed: 10 PrestoBlue® Unnamed: 12  \\\n",
              "0              29,65       5,51         0           0       16,93           6   \n",
              "2                  0      79,63         0       69,98       47,86        71,7   \n",
              "3                  0          0         0        1,18       10,27       24,21   \n",
              "4                  0          0      0,62           0       11,76        9,28   \n",
              "5                  0      91,64     82,19       90,71           0           0   \n",
              "..               ...        ...       ...         ...         ...         ...   \n",
              "395                0       6,89         0           0       11,08        1,05   \n",
              "396             2,48          0         0           0       22,62       28,18   \n",
              "397                0      10,08         0           0           0           0   \n",
              "398                0       6,49      2,93        4,83           0       34,64   \n",
              "399             1,36          0       5,5           0       28,32       78,81   \n",
              "\n",
              "    Final Primary Screen Gametocyte Inhibition (%) 5 µM  Shit Compound ID.1  \n",
              "0                                                    6    0.0     MMV000008  \n",
              "2                                                 79,6    1.0     MMV000043  \n",
              "3                                                 24,2    0.0     MMV000051  \n",
              "4                                                 91,6    1.0     MMV000725  \n",
              "5                                                  5,8    0.0     MMV001014  \n",
              "..                                                 ...    ...           ...  \n",
              "395                                               14,8    0.0     MMV690547  \n",
              "396                                               21,3    0.0     MMV690555  \n",
              "397                                                6,9    0.0     MMV690621  \n",
              "398                                                6,9    0.0     MMV690653  \n",
              "399                                               28,2    0.0     MMV690706  \n",
              "\n",
              "[399 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5759d2a7-ac36-4a7b-96a9-7aa0abe55a63\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Compound ID</th>\n",
              "      <th>SMILES</th>\n",
              "      <th>pLDH2 µM</th>\n",
              "      <th>Luciferase assay1µM</th>\n",
              "      <th>ATP assay1µM</th>\n",
              "      <th>PrestoBlue1µM</th>\n",
              "      <th>Sexual hit</th>\n",
              "      <th>Luciferase assay</th>\n",
              "      <th>Unnamed: 8</th>\n",
              "      <th>ATP assay</th>\n",
              "      <th>Unnamed: 10</th>\n",
              "      <th>PrestoBlue®</th>\n",
              "      <th>Unnamed: 12</th>\n",
              "      <th>Final Primary Screen Gametocyte Inhibition (%) 5 µM</th>\n",
              "      <th>Shit</th>\n",
              "      <th>Compound ID.1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>MMV000008</td>\n",
              "      <td>CCN(CC)CCCC(C)Nc1ccnc2cc(Cl)ccc12</td>\n",
              "      <td>85,78</td>\n",
              "      <td>29,65</td>\n",
              "      <td>0</td>\n",
              "      <td>16,93</td>\n",
              "      <td>0</td>\n",
              "      <td>29,65</td>\n",
              "      <td>5,51</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16,93</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MMV000008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>MMV000043</td>\n",
              "      <td>COc1cc(C)c2c(Oc3cccc(c3)C(F)(F)F)c(OC)cc(NC(C)...</td>\n",
              "      <td>56,47</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>47,86</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>79,63</td>\n",
              "      <td>0</td>\n",
              "      <td>69,98</td>\n",
              "      <td>47,86</td>\n",
              "      <td>71,7</td>\n",
              "      <td>79,6</td>\n",
              "      <td>1.0</td>\n",
              "      <td>MMV000043</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>MMV000051</td>\n",
              "      <td>CCC[C@@H]1C[C@H](N(C)C1)C(=O)N[C@H]([C@H](C)Cl...</td>\n",
              "      <td>72,93</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10,27</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1,18</td>\n",
              "      <td>10,27</td>\n",
              "      <td>24,21</td>\n",
              "      <td>24,2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MMV000051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>MMV000059</td>\n",
              "      <td>O1C(=CC=C1C2=CC=C(C(=N)NOC)C=C2)C3=CC=C(C(=N)N...</td>\n",
              "      <td>-3,01</td>\n",
              "      <td>0</td>\n",
              "      <td>0,62</td>\n",
              "      <td>11,76</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0,62</td>\n",
              "      <td>0</td>\n",
              "      <td>11,76</td>\n",
              "      <td>9,28</td>\n",
              "      <td>91,6</td>\n",
              "      <td>1.0</td>\n",
              "      <td>MMV000725</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>MMV000725</td>\n",
              "      <td>ClC3=C(OCC(O)C[N]1[C](=N)[N](CCN(CC)CC)C2=C1C=...</td>\n",
              "      <td>95,4</td>\n",
              "      <td>0</td>\n",
              "      <td>82,19</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>91,64</td>\n",
              "      <td>82,19</td>\n",
              "      <td>90,71</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5,8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MMV001014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>MMV690653</td>\n",
              "      <td>FC3=C2N=C(N(C1=C(OC)C=CC(=C1)C(F)(F)F)[C@H](C2...</td>\n",
              "      <td>22,9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11,08</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6,89</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11,08</td>\n",
              "      <td>1,05</td>\n",
              "      <td>14,8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MMV690547</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>MMV690706</td>\n",
              "      <td>ONC(=O)C1(CS(=O)(=O)c2ccc(Oc3ccc(Cl)cc3)cc2)CC...</td>\n",
              "      <td>28,12</td>\n",
              "      <td>2,48</td>\n",
              "      <td>0</td>\n",
              "      <td>22,62</td>\n",
              "      <td>0</td>\n",
              "      <td>2,48</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>22,62</td>\n",
              "      <td>28,18</td>\n",
              "      <td>21,3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MMV690555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>MMV811071</td>\n",
              "      <td>CN(C)CCNC(=O)c1cccc2cccnc12</td>\n",
              "      <td>9,84</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10,08</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6,9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MMV690621</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>MMV831201</td>\n",
              "      <td>FC(F)(C1N2N=CC(C(NCC(C=C3)=CC=C3OC)=O)=C2NC(C(...</td>\n",
              "      <td>37,21</td>\n",
              "      <td>0</td>\n",
              "      <td>2,93</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6,49</td>\n",
              "      <td>2,93</td>\n",
              "      <td>4,83</td>\n",
              "      <td>0</td>\n",
              "      <td>34,64</td>\n",
              "      <td>6,9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MMV690653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>399</th>\n",
              "      <td>MMV975972</td>\n",
              "      <td>NC1=CC(=NNC1=O)c2nc3ccccc3[nH]2</td>\n",
              "      <td>31,47</td>\n",
              "      <td>1,36</td>\n",
              "      <td>5,5</td>\n",
              "      <td>28,32</td>\n",
              "      <td>1</td>\n",
              "      <td>1,36</td>\n",
              "      <td>0</td>\n",
              "      <td>5,5</td>\n",
              "      <td>0</td>\n",
              "      <td>28,32</td>\n",
              "      <td>78,81</td>\n",
              "      <td>28,2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MMV690706</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>399 rows × 16 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5759d2a7-ac36-4a7b-96a9-7aa0abe55a63')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5759d2a7-ac36-4a7b-96a9-7aa0abe55a63 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5759d2a7-ac36-4a7b-96a9-7aa0abe55a63');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dchm2= prb[\"SMILES\"]\n",
        "dchm2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "88ffce14-85ac-4617-d3b1-8b80cdb85da5",
        "id": "8SuUGdbhlQzC"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0                      CCN(CC)CCCC(C)Nc1ccnc2cc(Cl)ccc12\n",
              "2      COc1cc(C)c2c(Oc3cccc(c3)C(F)(F)F)c(OC)cc(NC(C)...\n",
              "3      CCC[C@@H]1C[C@H](N(C)C1)C(=O)N[C@H]([C@H](C)Cl...\n",
              "4      O1C(=CC=C1C2=CC=C(C(=N)NOC)C=C2)C3=CC=C(C(=N)N...\n",
              "5      ClC3=C(OCC(O)C[N]1[C](=N)[N](CCN(CC)CC)C2=C1C=...\n",
              "                             ...                        \n",
              "395    FC3=C2N=C(N(C1=C(OC)C=CC(=C1)C(F)(F)F)[C@H](C2...\n",
              "396    ONC(=O)C1(CS(=O)(=O)c2ccc(Oc3ccc(Cl)cc3)cc2)CC...\n",
              "397                          CN(C)CCNC(=O)c1cccc2cccnc12\n",
              "398    FC(F)(C1N2N=CC(C(NCC(C=C3)=CC=C3OC)=O)=C2NC(C(...\n",
              "399                      NC1=CC(=NNC1=O)c2nc3ccccc3[nH]2\n",
              "Name: SMILES, Length: 399, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mols2 = [Chem.MolFromSmiles(x) for x in dchm2]\n",
        "featurizer = MACCSKeysFingerprint()\n",
        "maccs2 = featurizer.featurize(mols2)\n",
        "maccs2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "509af5ba-88e9-415d-94fb-90208a9d5849",
        "id": "Djld3eHzlQzC"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0, 0, 0, ..., 0, 1, 0],\n",
              "       [0, 0, 0, ..., 1, 1, 0],\n",
              "       [0, 0, 0, ..., 1, 1, 0],\n",
              "       ...,\n",
              "       [0, 0, 0, ..., 1, 1, 0],\n",
              "       [0, 0, 0, ..., 1, 1, 0],\n",
              "       [0, 0, 0, ..., 1, 1, 0]])"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Split\n",
        "\n",
        "Xtest = np.array(maccs2)\n",
        "Ytest = np.array(list(prb[\"Sexual hit\"]))\n",
        "print(\"Input\",Xt[0])\n",
        "print(\"Target\",Yt[0])\n",
        "\n",
        "#Split\n",
        "from sklearn.model_selection import train_test_split\n",
        "Xt_train, Xt_test = train_test_split(Xt, test_size=0.2)\n",
        "Yt_train, Yt_test = train_test_split(Yt, test_size=0.2)\n",
        "\n",
        "y_true= Yt_test\n",
        "\n",
        "Yt_train = keras.utils.to_categorical(Yt_train)\n",
        "Yt_test = keras.utils.to_categorical(Yt_test)\n",
        "\n",
        "print(\"Input\",Xt_train[0])\n",
        "print(\"Target\",Yt_train[0])\n",
        "print(\"Xt-train input shape:\", Xt_train.shape)\n",
        "print(\"Yt-train label shape:\", Yt_train.shape)\n",
        "# print(Xt_train.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3de28b3d-bccd-446f-dd58-7b0b02d16884",
        "id": "P3onptoAlQzD"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0\n",
            " 0 1 0 1 0 1 1 0 0 1 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 1 1 0 0 0 1 0 0 0 0 1\n",
            " 1 0 0 0 0 0 1 1 0 1 1 1 0 0 1 0 0 1 1 0 1 0 0 0 0 0 1 1 0 0 0 1 0 0 1 0 1\n",
            " 1 0 0 1 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0]\n",
            "Target 1\n",
            "Input [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n",
            " 0 1 0 1 0 1 1 0 0 1 0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 1 0 0 0 0 0 0 1 1 1 0\n",
            " 1 0 1 0 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 0 1\n",
            " 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 1 0]\n",
            "Target [0. 1.]\n",
            "Xt-train input shape: (7912, 167)\n",
            "Yt-train label shape: (7912, 2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Xtest = np.array(maccs2)\n",
        "Ytest = np.array(list(prb[\"Sexual hit\"]))\n",
        "print(\"Input\",Xt[0])\n",
        "print(\"Target\",Yt[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wFLwfcbp0eGL",
        "outputId": "4c9f04ef-92c3-4139-f797-a77c8fb06ac7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0\n",
            " 0 1 0 1 0 1 1 0 0 1 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 1 1 0 0 0 1 0 0 0 0 1\n",
            " 1 0 0 0 0 0 1 1 0 1 1 1 0 0 1 0 0 1 1 0 1 0 0 0 0 0 1 1 0 0 0 1 0 0 1 0 1\n",
            " 1 0 0 1 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0]\n",
            "Target 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###check to see if hits are in correct places\n",
        "print(maccs2[0:4])\n",
        "print(Ytest[0:4])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2d7e6884-78eb-49d9-c4f9-6033fc7eacce",
        "id": "bzroqstglQzD"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            "  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\n",
            "  0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 1 1 0 0 0 0 0 0 1 0 1 1 0 1 1 1 0 1\n",
            "  1 0 0 1 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 1 1 0 0 1 1 0\n",
            "  0 1 0 1 1 1 0 1 0 1 0 1 1 0 1 0 1 1 1 1 0 1 0]\n",
            " [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            "  0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\n",
            "  1 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 0 0 0 1 1 0 1 1 0 0 1 1 1 1\n",
            "  1 0 1 1 1 1 0 1 1 1 1 0 0 1 0 0 0 1 1 1 0 0 0 1 0 1 1 1 0 1 0 0 0 1 1 1\n",
            "  1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0]\n",
            " [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            "  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n",
            "  1 0 0 1 0 0 0 1 0 1 0 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1 0 0 1 0 0 0 1\n",
            "  1 0 1 1 0 0 1 1 1 1 1 0 1 1 1 0 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1 1 1 1 1\n",
            "  0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0]\n",
            " [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\n",
            "  0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 1\n",
            "  0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 0 0 0 0 0\n",
            "  0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 1 0\n",
            "  0 1 1 0 0 1 0 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0]]\n",
            "[0 1 0 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=[]\n",
        "df = pd.DataFrame(maccs2)\n",
        "#df[\"Target\"]= sxl[\"Target\"]\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "3689696f-17f2-4072-db92-ed5582be0562",
        "id": "NQ-5kMgZlQzD"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     0    1    2    3    4    5    6    7    8    9    ...  157  158  159  \\\n",
              "0      0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "1      0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "2      0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "3      0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "4      0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "..   ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
              "394    0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "395    0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "396    0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "397    0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "398    0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "\n",
              "     160  161  162  163  164  165  166  \n",
              "0      1    1    1    1    0    1    0  \n",
              "1      1    1    1    1    1    1    0  \n",
              "2      1    1    0    1    1    1    0  \n",
              "3      1    1    1    1    1    1    0  \n",
              "4      1    1    1    1    1    1    0  \n",
              "..   ...  ...  ...  ...  ...  ...  ...  \n",
              "394    1    1    1    1    1    1    0  \n",
              "395    0    1    1    1    1    1    0  \n",
              "396    1    1    1    1    1    1    0  \n",
              "397    1    1    1    1    1    1    0  \n",
              "398    0    1    1    1    1    1    0  \n",
              "\n",
              "[399 rows x 167 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3ffa471-29c7-4e55-b0d2-f1f1210b4a1d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>157</th>\n",
              "      <th>158</th>\n",
              "      <th>159</th>\n",
              "      <th>160</th>\n",
              "      <th>161</th>\n",
              "      <th>162</th>\n",
              "      <th>163</th>\n",
              "      <th>164</th>\n",
              "      <th>165</th>\n",
              "      <th>166</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>394</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>399 rows × 167 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3ffa471-29c7-4e55-b0d2-f1f1210b4a1d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b3ffa471-29c7-4e55-b0d2-f1f1210b4a1d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b3ffa471-29c7-4e55-b0d2-f1f1210b4a1d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xgb_predict = loaded_model.predict(df)"
      ],
      "metadata": {
        "id": "xBNIC21hlQzD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df= xgb_predict\n",
        "df= pd.DataFrame(df)\n",
        "print(df.value_counts())\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "eTcNdEPjk7s-",
        "outputId": "35f03820-ee4f-4aa8-85fd-8d795d7371c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    297\n",
            "1    102\n",
            "dtype: int64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     0\n",
              "0    1\n",
              "1    0\n",
              "2    0\n",
              "3    1\n",
              "4    1\n",
              "..  ..\n",
              "394  1\n",
              "395  0\n",
              "396  0\n",
              "397  0\n",
              "398  0\n",
              "\n",
              "[399 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c7c4eca-7dc5-4b5a-8c09-1514d489c4fb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>394</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>399 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c7c4eca-7dc5-4b5a-8c09-1514d489c4fb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6c7c4eca-7dc5-4b5a-8c09-1514d489c4fb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6c7c4eca-7dc5-4b5a-8c09-1514d489c4fb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "prd= df.set_axis(['Predicted'], axis=1, inplace=False)\n",
        "ht= prb[\"Sexual hit\"]\n",
        "print(ht)\n",
        "Yt = np.array(list(prb[\"Sexual hit\"]))\n",
        "#prd['Actual'] = prd['Actual'].fillna(0)\n",
        "#prd.Actual = prd.Actual.round(0)\n",
        "print(Yt)\n",
        "print(xgb_predict)\n",
        "prd\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2KV9fn071kS-",
        "outputId": "76f12516-2888-4a50-8381-75ea21fa5145"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0      0\n",
            "2      1\n",
            "3      0\n",
            "4      0\n",
            "5      1\n",
            "      ..\n",
            "395    0\n",
            "396    0\n",
            "397    0\n",
            "398    0\n",
            "399    1\n",
            "Name: Sexual hit, Length: 399, dtype: int64\n",
            "[0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0\n",
            " 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n",
            " 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]\n",
            "[1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1\n",
            " 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0\n",
            " 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0\n",
            " 0 1 0 0 0 1 0 0 0 0 1 0 1 0 0 1 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 0\n",
            " 0 0 0 0 0 0 0 0 1 0 0 1 1 1 1 0 0 0 0 1 0 0 0 0 1 0 1 1 0 1 0 1 0 0 1 0 0\n",
            " 0 1 0 1 1 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 0 0 1 0 1\n",
            " 0 0 0 0 1 1 0 0 1 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0\n",
            " 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 1 0 1 0 1 0 0 0 0 1\n",
            " 1 0 0 1 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Predicted\n",
              "0            1\n",
              "1            0\n",
              "2            0\n",
              "3            1\n",
              "4            1\n",
              "..         ...\n",
              "394          1\n",
              "395          0\n",
              "396          0\n",
              "397          0\n",
              "398          0\n",
              "\n",
              "[399 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-03713704-9605-456d-8975-1683da9ac43c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Predicted</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>394</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>399 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03713704-9605-456d-8975-1683da9ac43c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-03713704-9605-456d-8975-1683da9ac43c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-03713704-9605-456d-8975-1683da9ac43c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score\n",
        "# accuracy: (tp + tn) / (p + n)\n",
        "accuracy = accuracy_score(Yt,xgb_predict)\n",
        "print('Accuracy: %f' % accuracy)\n",
        "recall= recall_score(Yt,xgb_predict)\n",
        "print(\"Recall %f\" % recall)\n",
        "precision= precision_score(Yt,xgb_predict)\n",
        "print(\"precision %f\" % precision)\n",
        "# f1: 2 tp / (2 tp + fp + fn)\n",
        "f1 = f1_score(Yt,xgb_predict)\n",
        "print('F1 score: %f' % f1)\n",
        "cm= confusion_matrix(Yt,xgb_predict)\n",
        "cm"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "499db696-604d-413e-d5c9-e9204defaa41",
        "id": "JJ34P8Lg4zu-"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.694236\n",
            "Recall 0.307692\n",
            "precision 0.156863\n",
            "F1 score: 0.207792\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[261,  86],\n",
              "       [ 36,  16]])"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score\n",
        "print('ROCAUC score:',roc_auc_score(Yt, xgb_predict))\n",
        "print('Accuracy score:',accuracy_score(Yt, xgb_predict))\n",
        "print('F1 score:',f1_score(Yt, xgb_predict))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f40256e4-a034-47b0-a5ef-bae39d34b1a4",
        "id": "yY-aHhkr4zvA"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ROCAUC score: 0.5299268454888051\n",
            "Accuracy score: 0.6942355889724311\n",
            "F1 score: 0.2077922077922078\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score, cohen_kappa_score\n",
        "# kappa\n",
        "kappa = cohen_kappa_score(Yt, xgb_predict)\n",
        "print('Cohens kappa: %f' % kappa)\n",
        "# ROC AUC\n",
        "auc = roc_auc_score(Yt, xgb_predict)\n",
        "print('ROC AUC: %f' % auc)\n",
        "# confusion matrix\n",
        "matrix = confusion_matrix(Yt, xgb_predict)\n",
        "print(matrix)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "05df0e9f-8eca-4ee3-b90e-a2e964e0fad5",
        "id": "Pqicg2yF4zvB"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cohens kappa: 0.042488\n",
            "ROC AUC: 0.529927\n",
            "[[261  86]\n",
            " [ 36  16]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tlr5nq31llry"
      },
      "source": [
        "## Asexual stage"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GiGevf5olob3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "680fc5d5-ceef-446c-ddf8-83b41153d67e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/PhD/PTS_datasets\n",
            " ABSActiveInactiveFeatCorrelationOnABSActives.csv\n",
            " ABSActiveInactiveFeatCorrelationOnABSInactives.csv\n",
            " absdualGBMFinalizedhpt5005_UMFP_model_prediction_on_pbox.csv\n",
            " absdualLRFinalizedhpt5005_UMFP_model_prediction_on_pbox.csv\n",
            " absdualRFFinalizedhpt5005_UMFP_model_prediction_on_pbox.csv\n",
            " absdualsvmFinalizedhpt5005_UMFP_model_prediction_on_pbox.csv\n",
            " asexualsFeaturesZtestprop.csv\n",
            " asexualsFeaturesZtestpropInact.csv\n",
            " asexualsFeaturesZtestproportionsActvsInactv.csv\n",
            " asexualsFeaturesZtestpropTopABSfeat.csv\n",
            " asexualsFeaturesZtestpropTopDualfeat.csv\n",
            " asexualsFeaturesZtestpropTopfeat.csv\n",
            " asexualsGBMhpt_UMFP_model5atom500bitFinal.pkl\n",
            " asexualsLogisticRegressionFinalHPT_UMFP_model5005.pkl\n",
            " asexualsSVCFinalHPT_UMFP_model5005.pkl\n",
            " axldeepinsighOverUnderXttestMFP.npy\n",
            " axldeepinsighOverUnderXttrainMFP.npy\n",
            " axldeepinsighOverUnderYttestMFP.npy\n",
            " axldeepinsighOverUnderYttrainMFP.npy\n",
            " axl_UnderMFP_GBM_HPT5005_FeatureImp.csv\n",
            " axl_UnderMFP_LR_HPT_FeatureImp.csv\n",
            " axl_UnderMFP_RF_HPT5005_FeatureImp2.csv\n",
            " CTCVAE_300bit5radiusMFP.pkl\n",
            " CTCVAE_300bit5raduisMFP_500samples.csv\n",
            " CTGAN_300bit5radiusMFP.pkl\n",
            " CTGAN_300bit5raduisMFP_500samples.csv\n",
            " data\n",
            " DualactiveFeaturesZtestprop.csv\n",
            " DualActiveInactiveFeatCorrelationOnDualActives.csv\n",
            " DualActiveInactiveFeatCorrelationOnDualInactives.csv\n",
            " finalized_model.sav\n",
            " GanSexualsU_MACCs.pkl\n",
            " image_at_epoch_0000.png\n",
            " M_asexuals_lib_hits_nd_clst_nhts.csv\n",
            " Miniconda3-py37_4.12.0-Linux-x86_64.sh\n",
            " M_sexual_LibrariesC_hits_nd_2ndclst_nhits.csv\n",
            "'Sexual_libraries_hits and nonhits_composition.csv'\n",
            " sexualsFeaturesZtestpropInact.csv\n",
            " SexualsFeaturesZtestpropTopABSfeat.csv\n",
            " SexualsFeaturesZtestpropTopDualfeat.csv\n",
            " sexualsGBMFinalHPT_UMFP_model5005.pkl\n",
            " sexualsLRFinalHPT_UMFP_model5005.pkl\n",
            " sexualsRFFinalHPT_UMFP_model5005.pkl\n",
            " sexualsSVCFinalHPT_UMFP_model5005.pkl\n",
            " sxl_UnderMACCS_LR_HPT_FeatureImp.csv\n",
            " sxl_UnderMFP_GBM_HPT5005_FeatureImp.csv\n",
            " sxl_UnderMFP_LR_HPT5005_FeatureImp.csv\n",
            " sxl_UnderMFP_RF_HPT5005_FeatureImp2.csv\n",
            " sxl_UnderMFP_RF_HPT_FeatureImp2.csv\n",
            " sxl_UnderX_MFP.csv\n",
            " sxl_UnderX_MFP.csv.npy\n",
            " sxl_UnderX_MFP.npy\n",
            " TCGANSexualsU_MACCs.pkl\n",
            "Yes    30393\n",
            "No     29143\n",
            "Name: Hit, dtype: int64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                  Smiles  Hit\n",
              "0         Cc1cccnc1CN1CC[C@H](Oc2cccc(F)c2)[C@@](C)(O)C1  Yes\n",
              "1      CC(C)(C)C(=O)N1C[C@H](c2ccsc2)[C@H]2CN(C3CCCCC...  Yes\n",
              "2               CC(C)N(CCNC(=O)c1[nH]nc2ccc(I)cc12)C(C)C  Yes\n",
              "3                 CC(Nc1nc(-c2ccncc2)nc2c1CCNC2)c1ccccc1  Yes\n",
              "4               CC(C)C[C@H](N)COc1cccc(F)c1Oc1cccc(Cl)c1  Yes\n",
              "...                                                  ...  ...\n",
              "59531     O=C1CC[C@H]2[C@H](CCN2C(=O)C2CCOC2)N1Cc1ccncc1   No\n",
              "59532      Cc1cc(Nc2ccc(F)cn2)cc(C2CCN(Cc3ncc[nH]3)C2)n1   No\n",
              "59533           O=C(CCNc1ccccc1)NC1CCN(C(=O)C2CCCCC2)CC1   No\n",
              "59534       CN(C)c1nc2c(c(N3CCC(O)CC3)n1)CN(CC1CCNC1)CC2   No\n",
              "59535          Cc1cc(C(=O)N(C)C)nc(C2(C)CCCN2c2ccccc2)n1   No\n",
              "\n",
              "[59536 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7d40ed57-d59c-47aa-aba0-e5d67f14fe3d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Smiles</th>\n",
              "      <th>Hit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Cc1cccnc1CN1CC[C@H](Oc2cccc(F)c2)[C@@](C)(O)C1</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>CC(C)(C)C(=O)N1C[C@H](c2ccsc2)[C@H]2CN(C3CCCCC...</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>CC(C)N(CCNC(=O)c1[nH]nc2ccc(I)cc12)C(C)C</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CC(Nc1nc(-c2ccncc2)nc2c1CCNC2)c1ccccc1</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CC(C)C[C@H](N)COc1cccc(F)c1Oc1cccc(Cl)c1</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59531</th>\n",
              "      <td>O=C1CC[C@H]2[C@H](CCN2C(=O)C2CCOC2)N1Cc1ccncc1</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59532</th>\n",
              "      <td>Cc1cc(Nc2ccc(F)cn2)cc(C2CCN(Cc3ncc[nH]3)C2)n1</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59533</th>\n",
              "      <td>O=C(CCNc1ccccc1)NC1CCN(C(=O)C2CCCCC2)CC1</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59534</th>\n",
              "      <td>CN(C)c1nc2c(c(N3CCC(O)CC3)n1)CN(CC1CCNC1)CC2</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59535</th>\n",
              "      <td>Cc1cc(C(=O)N(C)C)nc(C2(C)CCCN2c2ccccc2)n1</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>59536 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d40ed57-d59c-47aa-aba0-e5d67f14fe3d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7d40ed57-d59c-47aa-aba0-e5d67f14fe3d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7d40ed57-d59c-47aa-aba0-e5d67f14fe3d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "#Optional: move to the desired location:\n",
        "%cd /content/drive/MyDrive/PhD/PTS_datasets/\n",
        "!ls '/content/drive/MyDrive/PhD/PTS_datasets/'\n",
        "import pandas as pd\n",
        "axl= pd.read_csv(\"M_asexuals_lib_hits_nd_clst_nhts.csv\")\n",
        "axl['Hit'] = axl['Hit'].replace(np.nan, \"No\")\n",
        "axl = axl.iloc[: , 1:]\n",
        "print(axl['Hit'].value_counts())\n",
        "axl"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "compounds =[]\n",
        "df1= axl[:20000]\n",
        "\n",
        "for _, smiles, hit in df1[[\"Smiles\", \"Hit\"]].itertuples():\n",
        "    compounds.append((Chem.MolFromSmiles(smiles),hit))\n",
        "\n",
        "df2= axl[20001:23766]\n",
        "\n",
        "for _, smiles, hit in df2[[\"Smiles\", \"Hit\"]].itertuples():\n",
        "    compounds.append((Chem.MolFromSmiles(smiles),hit))\n",
        "\n",
        "df3= axl[23767:25396]\n",
        "\n",
        "for _, smiles, hit in df3[[\"Smiles\", \"Hit\"]].itertuples():\n",
        "    compounds.append((Chem.MolFromSmiles(smiles),hit))\n",
        "\n",
        "\n",
        "df4= axl[25397:25662]\n",
        "\n",
        "for _, smiles, hit in df4[[\"Smiles\", \"Hit\"]].itertuples():\n",
        "    compounds.append((Chem.MolFromSmiles(smiles),hit))\n",
        "\n",
        "df5= axl[25663:26912]\n",
        "\n",
        "for _, smiles, hit in df5[[\"Smiles\", \"Hit\"]].itertuples():\n",
        "    compounds.append((Chem.MolFromSmiles(smiles),hit))\n",
        "\n",
        "df6= axl[26913:28399]\n",
        "\n",
        "for _, smiles, hit in df6[[\"Smiles\", \"Hit\"]].itertuples():\n",
        "    compounds.append((Chem.MolFromSmiles(smiles),hit))\n",
        "\n",
        "df7= axl[28400:]\n",
        "\n",
        "for _, smiles, hit in df7[[\"Smiles\", \"Hit\"]].itertuples():\n",
        "    compounds.append((Chem.MolFromSmiles(smiles),hit))\n",
        "\n",
        "len(compounds)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "euySuPqD80lf",
        "outputId": "92950bb7-3cc5-4474-a60e-37cc7a49dacb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "59530"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "axl[\"Target\"] = np.where(axl[\"Hit\"]== \"Yes\", 1,0)\n",
        "axl[\"Target\"].value_counts()"
      ],
      "metadata": {
        "id": "T8LvO5RZoWhO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20207b37-3599-4f70-c741-9ad8798badfd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    30393\n",
              "0    29143\n",
              "Name: Target, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "compounds\n",
        "dpchm= pd.DataFrame (compounds, columns = ['mol', 'hit']) \n",
        "dpchm"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "yEWff97S88Fa",
        "outputId": "813f76b1-6fc9-444e-a1c7-6cf57f0b148c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                    mol  hit\n",
              "0      <rdkit.Chem.rdchem.Mol object at 0x7f8258bda970>  Yes\n",
              "1      <rdkit.Chem.rdchem.Mol object at 0x7f8258bda9e0>  Yes\n",
              "2      <rdkit.Chem.rdchem.Mol object at 0x7f8258bdaa50>  Yes\n",
              "3      <rdkit.Chem.rdchem.Mol object at 0x7f8258bdaac0>  Yes\n",
              "4      <rdkit.Chem.rdchem.Mol object at 0x7f8258bda350>  Yes\n",
              "...                                                 ...  ...\n",
              "59525  <rdkit.Chem.rdchem.Mol object at 0x7f82577cd200>   No\n",
              "59526  <rdkit.Chem.rdchem.Mol object at 0x7f82577cd270>   No\n",
              "59527  <rdkit.Chem.rdchem.Mol object at 0x7f82577cd2e0>   No\n",
              "59528  <rdkit.Chem.rdchem.Mol object at 0x7f82577cd350>   No\n",
              "59529  <rdkit.Chem.rdchem.Mol object at 0x7f82577cd3c0>   No\n",
              "\n",
              "[59530 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8c0f211a-a845-42f4-abce-818e20cf9027\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mol</th>\n",
              "      <th>hit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f8258bda970&gt;</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f8258bda9e0&gt;</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f8258bdaa50&gt;</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f8258bdaac0&gt;</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f8258bda350&gt;</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59525</th>\n",
              "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f82577cd200&gt;</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59526</th>\n",
              "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f82577cd270&gt;</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59527</th>\n",
              "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f82577cd2e0&gt;</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59528</th>\n",
              "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f82577cd350&gt;</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59529</th>\n",
              "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f82577cd3c0&gt;</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>59530 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c0f211a-a845-42f4-abce-818e20cf9027')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8c0f211a-a845-42f4-abce-818e20cf9027 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8c0f211a-a845-42f4-abce-818e20cf9027');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#dchm= axl[\"Smiles\"]\n",
        "#dchm\n",
        "dpchm[\"Target\"] = np.where(dpchm[\"hit\"]== \"Yes\", 1,0)\n",
        "dpchm[\"Target\"].value_counts()\n",
        "\n",
        "dchm= dpchm[\"mol\"]\n",
        "dchm"
      ],
      "metadata": {
        "id": "8LN7BRQlnnyH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c0e0d2a4-9c64-4e73-dc4f-e65ba7744dd7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        <rdkit.Chem.rdchem.Mol object at 0x7f8258bda970>\n",
              "1        <rdkit.Chem.rdchem.Mol object at 0x7f8258bda9e0>\n",
              "2        <rdkit.Chem.rdchem.Mol object at 0x7f8258bdaa50>\n",
              "3        <rdkit.Chem.rdchem.Mol object at 0x7f8258bdaac0>\n",
              "4        <rdkit.Chem.rdchem.Mol object at 0x7f8258bda350>\n",
              "                               ...                       \n",
              "59525    <rdkit.Chem.rdchem.Mol object at 0x7f82577cd200>\n",
              "59526    <rdkit.Chem.rdchem.Mol object at 0x7f82577cd270>\n",
              "59527    <rdkit.Chem.rdchem.Mol object at 0x7f82577cd2e0>\n",
              "59528    <rdkit.Chem.rdchem.Mol object at 0x7f82577cd350>\n",
              "59529    <rdkit.Chem.rdchem.Mol object at 0x7f82577cd3c0>\n",
              "Name: mol, Length: 59530, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# MACCSKeysFingerprint"
      ],
      "metadata": {
        "id": "wVrxUD324-f4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install deepchem"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "379631c9-6036-4a6f-a8b8-bc86665cc30a",
        "id": "3UwaRovr4-f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: deepchem in /usr/local/lib/python3.9/dist-packages (2.7.1)\n",
            "Requirement already satisfied: numpy>=1.21 in /usr/local/lib/python3.9/dist-packages (from deepchem) (1.22.4)\n",
            "Requirement already satisfied: rdkit in /usr/local/lib/python3.9/dist-packages (from deepchem) (2022.9.5)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.9/dist-packages (from deepchem) (1.1.1)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (from deepchem) (1.4.4)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.9/dist-packages (from deepchem) (1.2.2)\n",
            "Requirement already satisfied: scipy<1.9 in /usr/local/lib/python3.9/dist-packages (from deepchem) (1.8.1)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas->deepchem) (2022.7.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.9/dist-packages (from pandas->deepchem) (2.8.2)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.9/dist-packages (from rdkit->deepchem) (8.4.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.9/dist-packages (from scikit-learn->deepchem) (3.1.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/dist-packages (from python-dateutil>=2.8.1->pandas->deepchem) (1.15.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import deepchem as dc\n",
        "from deepchem.feat import MACCSKeysFingerprint\n",
        "#mols = [Chem.MolFromSmiles(x) for x in dchm]\n",
        "featurizer = MACCSKeysFingerprint()\n",
        "maccs = featurizer.featurize(dchm)\n",
        "maccs"
      ],
      "metadata": {
        "id": "WOxXQ1shn7dl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "86c536e1-68c9-4bfb-9316-e61a7affdc50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0, 0, 0, ..., 1, 1, 0],\n",
              "       [0, 0, 0, ..., 1, 1, 0],\n",
              "       [0, 0, 0, ..., 1, 1, 0],\n",
              "       ...,\n",
              "       [0, 0, 0, ..., 1, 1, 0],\n",
              "       [0, 0, 0, ..., 1, 1, 0],\n",
              "       [0, 0, 0, ..., 1, 1, 0]])"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Split\n",
        "\n",
        "Xt = np.array(maccs)\n",
        "Yt = np.array(list(axl[\"Target\"]))\n",
        "print(\"Input\",Xt[0])\n",
        "print(\"Target\",Yt[0])\n",
        "\n",
        "#Split\n",
        "from sklearn.model_selection import train_test_split\n",
        "Xt_train, Xt_test = train_test_split(Xt, test_size=0.2)\n",
        "Yt_train, Yt_test = train_test_split(Yt, test_size=0.2)\n",
        "\n",
        "y_true= Yt_test\n",
        "\n",
        "Yt_train = keras.utils.to_categorical(Yt_train)\n",
        "Yt_test = keras.utils.to_categorical(Yt_test)\n",
        "\n",
        "print(\"Input\",Xt_train[0])\n",
        "print(\"Target\",Yt_train[0])\n",
        "print(\"Xt-train input shape:\", Xt_train.shape)\n",
        "print(\"Yt-train label shape:\", Yt_train.shape)\n",
        "# print(Xt_train.shape)"
      ],
      "metadata": {
        "id": "zN3AE1njoKnX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6e5b9c64-1177-4125-a8c2-75f4559759e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0\n",
            " 0 1 0 0 0 1 0 0 0 0 0 1 1 1 0 0 1 1 0 0 0 1 0 1 1 0 1 0 0 0 1 0 0 1 1 0 0\n",
            " 1 1 1 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 1 0 0 1 0 1 0 0 1 1 1 0 0 1 1 1 1 0 1\n",
            " 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0]\n",
            "Target 1\n",
            "Input [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0\n",
            " 1 0 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 0 0 0 1 1 1 0 0 0\n",
            " 1 1 0 0 1 1 0 1 0 1 1 1 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 1 1 0 1 1 0 0 1 0 1\n",
            " 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n",
            "Target [0. 1.]\n",
            "Xt-train input shape: (47624, 167)\n",
            "Yt-train label shape: (47628, 2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###check to see if hits are in correct places\n",
        "maccs[0:4]\n",
        "Yt[0:4]\n",
        "maccs[9887:9890]\n",
        "Yt[9887:9890]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dd0744ae-d7eb-4263-8a20-7b79bc74844f",
        "id": "FWf3AC68ArvO"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=[]\n",
        "df = pd.DataFrame(maccs)\n",
        "#df[\"Target\"]= sxl[\"Target\"]\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "8d6c097d-7b7d-4632-aaff-9aeaabdf91e8",
        "id": "FJWGJ7bqArvv"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       0    1    2    3    4    5    6    7    8    9    ...  157  158  159  \\\n",
              "0        0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "1        0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "2        0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "3        0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "4        0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "...    ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
              "59525    0    0    0    0    0    0    0    0    0    0  ...    1    1    1   \n",
              "59526    0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "59527    0    0    0    0    0    0    0    0    0    0  ...    0    1    1   \n",
              "59528    0    0    0    0    0    0    0    0    0    0  ...    1    1    0   \n",
              "59529    0    0    0    0    0    0    0    0    0    0  ...    0    1    0   \n",
              "\n",
              "       160  161  162  163  164  165  166  \n",
              "0        1    1    1    1    1    1    0  \n",
              "1        1    1    1    1    1    1    0  \n",
              "2        1    1    1    1    1    1    0  \n",
              "3        1    1    1    1    0    1    0  \n",
              "4        1    1    1    1    1    1    0  \n",
              "...    ...  ...  ...  ...  ...  ...  ...  \n",
              "59525    0    1    1    1    1    1    0  \n",
              "59526    1    1    1    1    0    1    0  \n",
              "59527    0    1    1    1    1    1    0  \n",
              "59528    1    1    1    1    1    1    0  \n",
              "59529    1    1    1    1    1    1    0  \n",
              "\n",
              "[59530 rows x 167 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8631f5ab-3748-4cd6-8a9d-3da3c7d03af6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>157</th>\n",
              "      <th>158</th>\n",
              "      <th>159</th>\n",
              "      <th>160</th>\n",
              "      <th>161</th>\n",
              "      <th>162</th>\n",
              "      <th>163</th>\n",
              "      <th>164</th>\n",
              "      <th>165</th>\n",
              "      <th>166</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59525</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59526</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59527</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59528</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59529</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>59530 rows × 167 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8631f5ab-3748-4cd6-8a9d-3da3c7d03af6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8631f5ab-3748-4cd6-8a9d-3da3c7d03af6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8631f5ab-3748-4cd6-8a9d-3da3c7d03af6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dpchm['hit']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XIm1AgWrBmg7",
        "outputId": "0cfbc112-7527-48f6-ad67-fb62e61fc616"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        Yes\n",
              "1        Yes\n",
              "2        Yes\n",
              "3        Yes\n",
              "4        Yes\n",
              "        ... \n",
              "59525     No\n",
              "59526     No\n",
              "59527     No\n",
              "59528     No\n",
              "59529     No\n",
              "Name: hit, Length: 59530, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "Xt_train, Xt_test, Yt_train, Yt_test = train_test_split(df, dpchm['hit'],test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "phjij2ycArvw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QfxdrvcHyUYp"
      },
      "outputs": [],
      "source": [
        "######################################################################XGBoost (https://www.analyticsvidhya.com/blog/2020/07/10-techniques-to-deal-with-class-imbalance-in-machine-learning/)\n",
        "# load library\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "\n",
        "xgbc = GradientBoostingClassifier()\n",
        "\n",
        "# fit the predictor and target\n",
        "xgbc.fit(Xt_train, Yt_train)\n",
        "\n",
        "# predict\n",
        "xgbc_predict = xgbc.predict(Xt_test)# check performance\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8931bccf-a97d-423a-97d7-2f37d3439d8a",
        "id": "XWWGcBpeyUYr"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "0.9032420628254662\n"
          ]
        }
      ],
      "source": [
        "# Save Model Using joblib\n",
        "import pandas\n",
        "from sklearn import model_selection\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import joblib\n",
        "\n",
        "%cd /content/\n",
        "# save the model to disk\n",
        "filename = 'asexualsXGBoost_UMACCS_model.sav'\n",
        "joblib.dump(xgbc, filename)\n",
        " \n",
        "# some time later...\n",
        " \n",
        "# load the model from disk\n",
        "loaded_model = joblib.load(filename)\n",
        "result = loaded_model.score(Xt_test, Yt_test)\n",
        "print(result)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "teWNbQ74yUYs"
      },
      "outputs": [],
      "source": [
        "!cp 'asexualsXGBoost_UMACCS_model.sav' /content/drive/MyDrive/PhD/XGBoost_MACCS"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "44a9b357-5cb7-4dd2-e725-07168b76df45",
        "id": "l7mQ-SpZyUYs"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/PhD/XGBoost_MACCS\n",
            " asexualsXGBoost_UMACCS_model.sav\n",
            " sexualsXGBoostHPTFInal_UMACCS_model.sav\n",
            " sexualsXGBoost_UMACCS_model.sav\n",
            "'sxl_UnderMACCS_XGB_HPT_FeatureImp (1).csv'\n",
            " sxl_UnderMACCS_XGB_HPT_FeatureImp.csv\n"
          ]
        }
      ],
      "source": [
        "###Import model\n",
        "#Optional: move to the desired location:\n",
        "%cd /content/drive/MyDrive/PhD/XGBoost_MACCS\n",
        "!ls '/content/drive/MyDrive/PhD/XGBoost_MACCS'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "84ed926a-5ed9-4f4d-a624-37400f208e2e",
        "id": "VuXA73QDyUYs"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9032420628254662\n"
          ]
        }
      ],
      "source": [
        "import pandas\n",
        "from sklearn import model_selection\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import joblib\n",
        "\n",
        "# load the model from disk\n",
        "loaded_model = joblib.load('/content/drive/MyDrive/PhD/XGBoost_MACCS/asexualsXGBoost_UMACCS_model.sav')\n",
        "result = loaded_model.score(Xt_test, Yt_test)\n",
        "print(result)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xgbc_predict= np.where(xgbc_predict== \"Yes\", 1,0)\n",
        "Yt_test= np.where(Yt_test== \"Yes\", 1,0)"
      ],
      "metadata": {
        "id": "YiwXQGL2hlf7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xgbc_predict\n",
        "Yt_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lr1Rlh9whCx1",
        "outputId": "f59a349f-1f5f-4607-9a9c-8f7ac5a9fa6f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 0, ..., 1, 0, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7fb0f187-f4ec-42b3-e73c-cd46c5fdb70d",
        "id": "sQhwcyTyyUYs"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.903242\n",
            "Recall 0.891650\n",
            "precision 0.915306\n",
            "F1 score: 0.903323\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[5372,  498],\n",
              "       [ 654, 5382]])"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score\n",
        "# accuracy: (tp + tn) / (p + n)\n",
        "accuracy = accuracy_score(Yt_test,xgbc_predict)\n",
        "print('Accuracy: %f' % accuracy)\n",
        "recall= recall_score(Yt_test,xgbc_predict)\n",
        "print(\"Recall %f\" % recall)\n",
        "precision= precision_score(Yt_test,xgbc_predict)\n",
        "print(\"precision %f\" % precision)\n",
        "# f1: 2 tp / (2 tp + fp + fn)\n",
        "f1 = f1_score(Yt_test,xgbc_predict)\n",
        "print('F1 score: %f' % f1)\n",
        "cm= confusion_matrix(Yt_test,xgbc_predict)\n",
        "cm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b24d59a7-6636-4f2a-8128-a44eb865fa3d",
        "id": "gu6lWkl9yUYt"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ROCAUC score: 0.9034059696336462\n",
            "Accuracy score: 0.9032420628254662\n",
            "F1 score: 0.9033232628398791\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score\n",
        "print('ROCAUC score:',roc_auc_score(Yt_test, xgbc_predict))\n",
        "print('Accuracy score:',accuracy_score(Yt_test, xgbc_predict))\n",
        "print('F1 score:',f1_score(Yt_test,xgbc_predict))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "581e657b-757b-4ce4-b862-08cb24c7e06e",
        "id": "Eh4E4JxAyUYt"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cohens kappa: 0.806517\n",
            "ROC AUC: 0.903406\n",
            "[[5372  498]\n",
            " [ 654 5382]]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score, cohen_kappa_score\n",
        "# kappa\n",
        "kappa = cohen_kappa_score(Yt_test, xgbc_predict)\n",
        "print('Cohens kappa: %f' % kappa)\n",
        "# ROC AUC\n",
        "auc = roc_auc_score(Yt_test, xgbc_predict)\n",
        "print('ROC AUC: %f' % auc)\n",
        "# confusion matrix\n",
        "matrix = confusion_matrix(Yt_test, xgbc_predict)\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 218
        },
        "outputId": "fcb52680-3db3-456a-9518-c8fb19151b29",
        "id": "hhKWhVUpyUYt"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Set: 11906\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-33-d39a7402854a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Test Set: {len(Xt_test)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mYt_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'value_counts'"
          ]
        }
      ],
      "source": [
        "print(f\"Test Set: {len(Xt_test)}\")\n",
        "print(Yt_test.value_counts())\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eqTRJp6syUYt"
      },
      "outputs": [],
      "source": [
        "##################################################Cross validation kfold=10\n",
        "# load library\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "\n",
        "xgbc = GradientBoostingClassifier()\n",
        "\n",
        "# fit the predictor and target\n",
        "fit= xgbc.fit(Xt_train, Yt_train)\n",
        "\n",
        "# predict\n",
        "xgbc_predict = xgbc.predict(Xt_test)# check performance\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LGA7H_jbyUYt"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "scores = cross_val_score(xgbc,Xt_train, Yt_train, cv=10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ad57a48a-5569-4429-c7a3-50a1f4ae943f",
        "id": "7lJmYppUyUYt"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9081 accuracy with a standard deviation of 0.0030\n"
          ]
        }
      ],
      "source": [
        "print(\"%0.4f accuracy with a standard deviation of %0.4f\" % (scores.mean(), scores.std()))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dc1034af-3d42-42af-f2b6-8a73563bb718",
        "id": "QdMXtuBHyUYt"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy: 0.966650\n",
            "Recall 0.701571\n",
            "precision 0.937063\n",
            "F1 score: 0.802395\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "array([[1779,    9],\n",
              "       [  57,  134]])"
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score\n",
        "# accuracy: (tp + tn) / (p + n)\n",
        "accuracy = accuracy_score(Yt_test,xgbc_predict)\n",
        "print('Accuracy: %f' % accuracy)\n",
        "recall= recall_score(Yt_test,xgbc_predict)\n",
        "print(\"Recall %f\" % recall)\n",
        "precision= precision_score(Yt_test,xgbc_predict)\n",
        "print(\"precision %f\" % precision)\n",
        "# f1: 2 tp / (2 tp + fp + fn)\n",
        "f1 = f1_score(Yt_test,xgbc_predict)\n",
        "print('F1 score: %f' % f1)\n",
        "cm= confusion_matrix(Yt_test,xgbc_predict)\n",
        "cm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9f9ea2cc-40ef-4b9c-b940-423d820863cf",
        "id": "49nrIx_5yUYu"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ROCAUC score: 0.8482685617906462\n",
            "Accuracy score: 0.9666498231430015\n",
            "F1 score: 0.8023952095808383\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score\n",
        "print('ROCAUC score:',roc_auc_score(Yt_test, xgbc_predict))\n",
        "print('Accuracy score:',accuracy_score(Yt_test, xgbc_predict))\n",
        "print('F1 score:',f1_score(Yt_test,xgbc_predict))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e9ce5720-1e00-4ac4-cd65-ecc695c60ecc",
        "id": "f2UKTsiHyUYu"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Cohens kappa: 0.784593\n",
            "ROC AUC: 0.848269\n",
            "[[1779    9]\n",
            " [  57  134]]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score, cohen_kappa_score\n",
        "# kappa\n",
        "kappa = cohen_kappa_score(Yt_test, xgbc_predict)\n",
        "print('Cohens kappa: %f' % kappa)\n",
        "# ROC AUC\n",
        "auc = roc_auc_score(Yt_test, xgbc_predict)\n",
        "print('ROC AUC: %f' % auc)\n",
        "# confusion matrix\n",
        "matrix = confusion_matrix(Yt_test, xgbc_predict)\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a49de83a-2654-40c1-856b-942302eef1d9",
        "id": "s4IKLRHbyUYu"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Test Set: 1979\n",
            "0    1788\n",
            "1     191\n",
            "Name: Target, dtype: int64\n",
            "[[1779    9]\n",
            " [  57  134]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"Test Set: {len(Xt_test)}\")\n",
        "print(Yt_test.value_counts())\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cpi44FtFyUYu"
      },
      "source": [
        "# Hyperparameter Tuning\n",
        "\n",
        "---\n",
        "\n",
        "Random Forest Hyperparameters we’ll be Looking at:\n",
        "\n",
        "*   Number of trees (n_estimators)\n",
        "*   Number of Samples (subsample)\n",
        "*   Number of Features (max_features)\n",
        "*   Learning Rate\n",
        "*   Tree Depth (max_depth)\n",
        "---\n",
        "https://machinelearningmastery.com/gradient-boosting-machine-ensemble-in-python/\n",
        "https://www.analyticsvidhya.com/blog/2016/02/complete-guide-parameter-tuning-gradient-boosting-gbm-python/\n",
        "https://machinelearningmastery.com/gradient-boosting-with-scikit-learn-xgboost-lightgbm-and-catboost/"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HIZ6ULanyUYu"
      },
      "outputs": [],
      "source": [
        "\n",
        "# evaluate gradient boosting algorithm for classification\n",
        "from numpy import mean\n",
        "from numpy import std\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.model_selection import RepeatedStratifiedKFold\n",
        "from sklearn.ensemble import GradientBoostingClassifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "outputId": "be4996ea-423e-4f1b-c973-b16d9f28644b",
        "id": "kXkC4XGtyUYv"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">10 0.840 (0.005)\n",
            ">50 0.891 (0.005)\n",
            ">100 0.908 (0.004)\n",
            ">500 0.933 (0.004)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-20-8ddf8479e2a1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m         \u001b[0;31m# evaluate the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m         \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;31m# store the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m         \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-20-8ddf8479e2a1>\u001b[0m in \u001b[0;36mevaluate_model\u001b[0;34m(model, X, y)\u001b[0m\n\u001b[1;32m     29\u001b[0m         \u001b[0mcv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRepeatedStratifiedKFold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_repeats\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m         \u001b[0;31m# evaluate the model and collect the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 31\u001b[0;31m         \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'accuracy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mscores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_val_score\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, error_score)\u001b[0m\n\u001b[1;32m    518\u001b[0m         \u001b[0mfit_params\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    519\u001b[0m         \u001b[0mpre_dispatch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpre_dispatch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 520\u001b[0;31m         \u001b[0merror_score\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merror_score\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    521\u001b[0m     )\n\u001b[1;32m    522\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcv_results\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"test_score\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_validate\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score, return_estimator, error_score)\u001b[0m\n\u001b[1;32m    281\u001b[0m             \u001b[0merror_score\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merror_score\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m         )\n\u001b[0;32m--> 283\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m     )\n\u001b[1;32m    285\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1054\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1055\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1056\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1057\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1058\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    933\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    934\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 935\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    936\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    937\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    540\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    541\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 542\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    543\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mCfTimeoutError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    428\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 430\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_condition\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    431\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mCANCELLED\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCANCELLED_AND_NOTIFIED\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    294\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "\n",
        "# explore gradient boosting number of trees effect on performance\n",
        "from numpy import mean\n",
        "from numpy import std\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.model_selection import RepeatedStratifiedKFold\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from matplotlib import pyplot\n",
        " \n",
        " \n",
        "# get a list of models to evaluate\n",
        "def get_models():\n",
        "\tmodels = dict()\n",
        "\t# define number of trees to consider\n",
        "\tn_trees = [10, 50, 100, 500, 1000]\n",
        "\tfor n in n_trees:\n",
        "\t\tmodels[str(n)] = GradientBoostingClassifier(n_estimators=n)\n",
        "\treturn models\n",
        "\n",
        "\n",
        " # define dataset\n",
        "X = Xt_train\n",
        "y = Yt_train\n",
        "\n",
        "# evaluate a given model using cross-validation\n",
        "def evaluate_model(model, X, y):\n",
        "\t# define the evaluation procedure\n",
        "\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "\t# evaluate the model and collect the results\n",
        "\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "\treturn scores\n",
        " \n",
        "\n",
        "# get the models to evaluate\n",
        "models = get_models()\n",
        "# evaluate the models and store results\n",
        "results, names = list(), list()\n",
        "for name, model in models.items():\n",
        "\t# evaluate the model\n",
        "\tscores = evaluate_model(model, X, y)\n",
        "\t# store the results\n",
        "\tresults.append(scores)\n",
        "\tnames.append(name)\n",
        "\t# summarize the performance along the way\n",
        "\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n",
        "# plot model performance for comparison\n",
        "pyplot.boxplot(results, labels=names, showmeans=True)\n",
        "pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "outputId": "e5906d71-1c9e-42cc-f51d-92a2a4f37cd3",
        "id": "iBZDtd9iyUYv"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-22-08f84213023d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m         \u001b[0;31m# evaluate the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m         \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m         \u001b[0;31m# store the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m         \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-22-08f84213023d>\u001b[0m in \u001b[0;36mevaluate_model\u001b[0;34m(model, X, y)\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0mcv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRepeatedStratifiedKFold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_repeats\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0;31m# evaluate the model and collect the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m         \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'accuracy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mscores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_val_score\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, error_score)\u001b[0m\n\u001b[1;32m    518\u001b[0m         \u001b[0mfit_params\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    519\u001b[0m         \u001b[0mpre_dispatch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpre_dispatch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 520\u001b[0;31m         \u001b[0merror_score\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merror_score\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    521\u001b[0m     )\n\u001b[1;32m    522\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcv_results\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"test_score\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_validate\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score, return_estimator, error_score)\u001b[0m\n\u001b[1;32m    281\u001b[0m             \u001b[0merror_score\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merror_score\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m         )\n\u001b[0;32m--> 283\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m     )\n\u001b[1;32m    285\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1054\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1055\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1056\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1057\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1058\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    933\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    934\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 935\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    936\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    937\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    540\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    541\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 542\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    543\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mCfTimeoutError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    428\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 430\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_condition\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    431\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mCANCELLED\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCANCELLED_AND_NOTIFIED\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    294\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "\n",
        "# get a list of models to evaluate\n",
        "def get_models():\n",
        "\tmodels = dict()\n",
        "\t# explore sample ratio from 10% to 100% in 10% increments\n",
        "\tfor i in (0.1, 1.1, 0.1):\n",
        "\t\tkey = '%.1f' % i\n",
        "\t\tmodels[key] = GradientBoostingClassifier(subsample=i, n_estimators=500)\n",
        "\treturn models\n",
        " \n",
        "# evaluate a given model using cross-validation\n",
        "def evaluate_model(model, X, y):\n",
        "\t# define the evaluation procedure\n",
        "\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "\t# evaluate the model and collect the results\n",
        "\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "\treturn scores\n",
        " \n",
        " # define dataset\n",
        "X = Xt_train\n",
        "y = Yt_train\n",
        "# get the models to evaluate\n",
        "models = get_models()\n",
        "# evaluate the models and store results\n",
        "results, names = list(), list()\n",
        "for name, model in models.items():\n",
        "\t# evaluate the model\n",
        "\tscores = evaluate_model(model, X, y)\n",
        "\t# store the results\n",
        "\tresults.append(scores)\n",
        "\tnames.append(name)\n",
        "\t# summarize the performance along the way\n",
        "\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n",
        "# plot model performance for comparison\n",
        "pyplot.boxplot(results, labels=names, showmeans=True)\n",
        "pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "outputId": "bb73484d-2164-4597-d254-b756847e205e",
        "id": "RS_M0VwKyUYv"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">1 0.963 (0.019)\n",
            ">2 0.935 (0.094)\n",
            ">3 0.953 (0.047)\n",
            ">4 0.916 (0.098)\n",
            ">5 0.898 (0.109)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-19-42d68f428fb7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m         \u001b[0;31m# evaluate the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m         \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m         \u001b[0;31m# store the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m         \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-19-42d68f428fb7>\u001b[0m in \u001b[0;36mevaluate_model\u001b[0;34m(model, X, y)\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0mcv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRepeatedStratifiedKFold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_repeats\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0;31m# evaluate the model and collect the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'accuracy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mscores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_val_score\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, error_score)\u001b[0m\n\u001b[1;32m    518\u001b[0m         \u001b[0mfit_params\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    519\u001b[0m         \u001b[0mpre_dispatch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpre_dispatch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 520\u001b[0;31m         \u001b[0merror_score\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merror_score\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    521\u001b[0m     )\n\u001b[1;32m    522\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcv_results\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"test_score\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_validate\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score, return_estimator, error_score)\u001b[0m\n\u001b[1;32m    281\u001b[0m             \u001b[0merror_score\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merror_score\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m         )\n\u001b[0;32m--> 283\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m     )\n\u001b[1;32m    285\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1054\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1055\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1056\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1057\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1058\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    933\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    934\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 935\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    936\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    937\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    540\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    541\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 542\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    543\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mCfTimeoutError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    428\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 430\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_condition\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    431\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mCANCELLED\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCANCELLED_AND_NOTIFIED\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    294\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "\n",
        "# get a list of models to evaluate\n",
        "def get_models():\n",
        "\tmodels = dict()\n",
        "\t# explore number of features from 1 to 20\n",
        "\tfor i in range(1,21):\n",
        "\t\tmodels[str(i)] = GradientBoostingClassifier(max_features=i, subsample=0.1, n_estimators=1000)\n",
        "\treturn models\n",
        " \n",
        "# evaluate a given model using cross-validation\n",
        "def evaluate_model(model, X, y):\n",
        "\t# define the evaluation procedure\n",
        "\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "\t# evaluate the model and collect the results\n",
        "\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "\treturn scores\n",
        " \n",
        " # define dataset\n",
        "X = Xt_train\n",
        "y = Yt_train\n",
        "# get the models to evaluate\n",
        "models = get_models()\n",
        "# evaluate the models and store results\n",
        "results, names = list(), list()\n",
        "for name, model in models.items():\n",
        "\t# evaluate the model\n",
        "\tscores = evaluate_model(model, X, y)\n",
        "\t# store the results\n",
        "\tresults.append(scores)\n",
        "\tnames.append(name)\n",
        "\t# summarize the performance along the way\n",
        "\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n",
        "# plot model performance for comparison\n",
        "pyplot.boxplot(results, labels=names, showmeans=True)\n",
        "pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rfCEkt-XyUYv"
      },
      "outputs": [],
      "source": [
        " \n",
        "# get a list of models to evaluate\n",
        "def get_models():\n",
        "\tmodels = dict()\n",
        "\t# define learning rates to explore\n",
        "\tfor i in [0.0001, 0.001, 0.01, 0.1, 1.0]:\n",
        "\t\tkey = '%.4f' % i\n",
        "\t\tmodels[key] = GradientBoostingClassifier(learning_rate=i, max_features=i, subsample=0.1, n_estimators=1000)\n",
        "\treturn models\n",
        " \n",
        "# evaluate a given model using cross-validation\n",
        "def evaluate_model(model, X, y):\n",
        "\t# define the evaluation procedure\n",
        "\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "\t# evaluate the model and collect the results\n",
        "\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "\treturn scores\n",
        " \n",
        " # define dataset\n",
        "X = Xt_train\n",
        "y = Yt_train\n",
        "# get the models to evaluate\n",
        "models = get_models()\n",
        "# evaluate the models and store results\n",
        "results, names = list(), list()\n",
        "for name, model in models.items():\n",
        "\t# evaluate the model\n",
        "\tscores = evaluate_model(model, X, y)\n",
        "\t# store the results\n",
        "\tresults.append(scores)\n",
        "\tnames.append(name)\n",
        "\t# summarize the performance along the way\n",
        "\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n",
        "# plot model performance for comparison\n",
        "pyplot.boxplot(results, labels=names, showmeans=True)\n",
        "pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nciC1bsjyUYv"
      },
      "outputs": [],
      "source": [
        "# get a list of models to evaluate\n",
        "def get_models():\n",
        "\tmodels = dict()\n",
        "\t# define max tree depths to explore between 1 and 10\n",
        "\tfor i in range(1,11):\n",
        "\t\tmodels[str(i)] = GradientBoostingClassifier(max_depth=i, learning_rate=i, max_features=i, subsample=0.1, n_estimators=1000)\n",
        "\treturn models\n",
        " \n",
        "# evaluate a given model using cross-validation\n",
        "def evaluate_model(model, X, y):\n",
        "\t# define the evaluation procedure\n",
        "\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "\t# evaluate the model and collect the results\n",
        "\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
        "\treturn scores\n",
        " \n",
        " # define dataset\n",
        "X = Xt_train\n",
        "y = Yt_train\n",
        "# get the models to evaluate\n",
        "models = get_models()\n",
        "# evaluate the models and store results\n",
        "results, names = list(), list()\n",
        "for name, model in models.items():\n",
        "\t# evaluate the model\n",
        "\tscores = evaluate_model(model, X, y)\n",
        "\t# store the results\n",
        "\tresults.append(scores)\n",
        "\tnames.append(name)\n",
        "\t# summarize the performance along the way\n",
        "\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n",
        "# plot model performance for comparison\n",
        "pyplot.boxplot(results, labels=names, showmeans=True)\n",
        "pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9fd8a61b-1c83-4bd2-f7b1-f8fe3f7a5598",
        "id": "TeRbgnTHyUYv"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best: 0.935999 using {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.892449 (0.002100) with: {'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.925899 (0.001743) with: {'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.935999 (0.002730) with: {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.922665 (0.001785) with: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.859357 (0.015328) with: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 500, 'subsample': 0.1}\n",
            "0.699836 (0.037649) with: {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 500, 'subsample': 0.1}\n"
          ]
        }
      ],
      "source": [
        "# example of grid searching key hyperparameters for gradient boosting on a classification dataset\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import RepeatedStratifiedKFold\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "# define dataset\n",
        "X = Xt_train\n",
        "y = Yt_train\n",
        "# define the model with default hyperparameters\n",
        "model = GradientBoostingClassifier()\n",
        "# define the grid of values to search\n",
        "grid = dict()\n",
        "grid['n_estimators'] = [ 500]\n",
        "grid['learning_rate'] = [ 0.01, 0.1]\n",
        "grid['subsample'] = [0.1]\n",
        "grid['max_depth'] = [3, 7, 9]\n",
        "# define the evaluation procedure\n",
        "cv = RepeatedStratifiedKFold(n_splits=2, n_repeats=1, random_state=1)\n",
        "# define the grid search procedure\n",
        "grid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy')\n",
        "# execute the grid search\n",
        "grid_result = grid_search.fit(X, y)\n",
        "# summarize the best score and configuration\n",
        "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
        "# summarize all scores that were evaluated\n",
        "means = grid_result.cv_results_['mean_test_score']\n",
        "stds = grid_result.cv_results_['std_test_score']\n",
        "params = grid_result.cv_results_['params']\n",
        "for mean, stdev, param in zip(means, stds, params):\n",
        "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# load library\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "# Best: 0.969877 using {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 500, 'subsample': 0.1}\n",
        "xgbc = GradientBoostingClassifier( learning_rate=0.01, subsample=0.1, n_estimators=500, max_depth= 9)\n",
        "\n",
        "# fit the predictor and target\n",
        "xgbc.fit(Xt_train, Yt_train)\n",
        "\n",
        "# predict\n",
        "gbm_predict = xgbc.predict(Xt_test)# check performance"
      ],
      "metadata": {
        "id": "sW6gXwF9ZFjj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gbm_predict= np.where(gbm_predict== \"Yes\", 1,0)\n",
        "Yt_test= np.where(Yt_test== \"Yes\", 1,0)"
      ],
      "metadata": {
        "id": "DyTIJJLEaYkO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score\n",
        "# accuracy: (tp + tn) / (p + n)\n",
        "accuracy = accuracy_score(Yt_test,gbm_predict)\n",
        "print('Accuracy: %f' % accuracy)\n",
        "recall= recall_score(Yt_test,gbm_predict)\n",
        "print(\"Recall %f\" % recall)\n",
        "precision= precision_score(Yt_test,gbm_predict)\n",
        "print(\"precision %f\" % precision)\n",
        "# f1: 2 tp / (2 tp + fp + fn)\n",
        "f1 = f1_score(Yt_test,gbm_predict)\n",
        "print('F1 score: %f' % f1)\n",
        "cm= confusion_matrix(Yt_test,gbm_predict)\n",
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score\n",
        "print('ROCAUC score:',roc_auc_score(Yt_test, gbm_predict))\n",
        "print('Accuracy score:',accuracy_score(Yt_test, gbm_predict))\n",
        "print('F1 score:',f1_score(Yt_test, gbm_predict))\n",
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score, cohen_kappa_score\n",
        "# kappa\n",
        "kappa = cohen_kappa_score(Yt_test, gbm_predict)\n",
        "print('Cohens kappa: %f' % kappa)\n",
        "# ROC AUC\n",
        "auc = roc_auc_score(Yt_test, gbm_predict)\n",
        "print('ROC AUC: %f' % auc)\n",
        "# confusion matrix\n",
        "matrix = confusion_matrix(Yt_test, gbm_predict)\n",
        "print(matrix)\n",
        "from sklearn.model_selection import cross_val_score\n",
        "scores = cross_val_score(xgbc,Xt_train, Yt_train, cv=10)\n",
        "\n",
        "print(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))\n",
        "print(scores.mean())\n",
        "print(scores.std())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "90415a9d-ec6f-47d1-e012-3049cf6c3359",
        "id": "Xrxk_hmJZFjj"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.941206\n",
            "Recall 0.926441\n",
            "precision 0.956224\n",
            "F1 score: 0.941097\n",
            "ROCAUC score: 0.9414148837807906\n",
            "Accuracy score: 0.9412061145640853\n",
            "F1 score: 0.9410972736452372\n",
            "Cohens kappa: 0.882441\n",
            "ROC AUC: 0.941415\n",
            "[[5614  256]\n",
            " [ 444 5592]]\n",
            "0.94 accuracy with a standard deviation of 0.00\n",
            "0.942613015260165\n",
            "0.0021048002663797438\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save Model Using joblib\n",
        "import pandas\n",
        "from sklearn import model_selection\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import joblib\n",
        "\n",
        "%cd /content/\n",
        "# save the model to disk\n",
        "filename = 'asexualsGBM_HPTFInal_UMACCS_model.pkl'\n",
        "joblib.dump(xgbc, filename)\n",
        " \n",
        "# some time later...\n",
        "Yt_test= np.where(Yt_test== 1, \"Yes\",\"No\")\n",
        "# load the model from disk\n",
        "loaded_model = joblib.load(filename)\n",
        "result = loaded_model.score(Xt_test, Yt_test)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "777b80cb-5799-4425-e4c0-33710cdf993b",
        "id": "j8tlkmucZFjj"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "0.9412061145640853\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1KCyA5yQZFjk"
      },
      "outputs": [],
      "source": [
        "!cp 'asexualsGBM_HPTFInal_UMACCS_model.pkl' /content/drive/MyDrive/PhD/XGBoost_MACCS"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Feature Importance\n",
        "---\n",
        "\n",
        "https://scikit-learn.org/stable/modules/permutation_importance.html#permutation-importance\n",
        "https://scikit-learn.org/stable/auto_examples/ensemble/plot_gradient_boosting_regression.html\n"
      ],
      "metadata": {
        "id": "54ph6hAAyUYw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# load library\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "# Best: 0.935999 using {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 500, 'subsample': 0.1}\n",
        "xgbc = GradientBoostingClassifier( learning_rate=0.01, subsample=0.1, n_estimators=500, max_depth= 9)\n",
        "\n",
        "# fit the predictor and target\n",
        "xgbc.fit(Xt_train, Yt_train)\n",
        "\n",
        "# predict\n",
        "xgbc_predict = xgbc.predict(Xt_test)# check performance"
      ],
      "metadata": {
        "id": "6N6iOIp4yUYw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xgbc_predict= np.where(xgbc_predict== \"Yes\", 1,0)\n",
        "Yt_test= np.where(Yt_test== \"Yes\", 1,0)"
      ],
      "metadata": {
        "id": "xxOrPeJh_2FI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xgbc_predict\n",
        "Yt_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lchpKLwI_FRM",
        "outputId": "53e842c8-92f0-4647-ec57-42adf3f51c28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 0, ..., 1, 0, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7040d75d-f67a-4071-8653-a5bf976abfbc",
        "id": "MDyHnydVyUYw"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "0.9422140097429867\n"
          ]
        }
      ],
      "source": [
        "# Save Model Using joblib\n",
        "import pandas\n",
        "from sklearn import model_selection\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import joblib\n",
        "\n",
        "%cd /content/\n",
        "# save the model to disk\n",
        "filename = 'asexualsGBoostHPTFInal_UMACCS_model.sav'\n",
        "joblib.dump(xgbc, filename)\n",
        " \n",
        "# some time later...\n",
        " \n",
        "# load the model from disk\n",
        "loaded_model = joblib.load(filename)\n",
        "result = loaded_model.score(Xt_test, Yt_test)\n",
        "print(result)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "N_eLP6E1yUYw"
      },
      "outputs": [],
      "source": [
        "!cp 'asexualsGBoostHPTFInal_UMACCS_model.sav' /content/drive/MyDrive/PhD/XGBoost_MACCS"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e6b7e39-62d4-4829-8198-58b434c7e13d",
        "id": "kKkHdNXyyUYw"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/PhD/XGBoost_MACCS\n",
            "sexualsXGBoostHPTFInal_UMACCS_model.sav  sxl_UnderMACCS_XGB_HPT_FeatureImp.csv\n",
            "sexualsXGBoost_UMACCS_model.sav\n"
          ]
        }
      ],
      "source": [
        "###Import model\n",
        "#Optional: move to the desired location:\n",
        "%cd /content/drive/MyDrive/PhD/XGBoost_MACCS\n",
        "!ls '/content/drive/MyDrive/PhD/XGBoost_MACCS'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a270fb1a-5f47-44ba-89bf-6819e903b16a",
        "id": "nJv2FgEQyUYw"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9422140097429867\n"
          ]
        }
      ],
      "source": [
        "import pandas\n",
        "from sklearn import model_selection\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import joblib\n",
        "\n",
        "# load the model from disk\n",
        "loaded_model = joblib.load('/content/drive/MyDrive/PhD/XGBoost_MACCS/asexualsGBoostHPTFInal_UMACCS_model.sav')\n",
        "result = loaded_model.score(Xt_test, Yt_test)\n",
        "print(result)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mURQ6LBAyUYw"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "scores = cross_val_score(xgbc,Xt_train, Yt_train, cv=10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af1db2da-cac0-4ec9-8f21-42409c10398d",
        "id": "dXYFrlkRyUYx"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.94 accuracy with a standard deviation of 0.00\n",
            "0.9432849841848429\n",
            "0.0027284821085352827\n"
          ]
        }
      ],
      "source": [
        "print(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))\n",
        "print(scores.mean())\n",
        "print(scores.std())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bc7e0b72-2d80-408d-f624-4da3adaafc76",
        "id": "hK1C9LmsyUYx"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.942214\n",
            "Recall 0.926773\n",
            "precision 0.957877\n",
            "F1 score: 0.942068\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[5624,  246],\n",
              "       [ 442, 5594]])"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score\n",
        "# accuracy: (tp + tn) / (p + n)\n",
        "accuracy = accuracy_score(Yt_test,xgbc_predict)\n",
        "print('Accuracy: %f' % accuracy)\n",
        "recall= recall_score(Yt_test,xgbc_predict)\n",
        "print(\"Recall %f\" % recall)\n",
        "precision= precision_score(Yt_test,xgbc_predict)\n",
        "print(\"precision %f\" % precision)\n",
        "# f1: 2 tp / (2 tp + fp + fn)\n",
        "f1 = f1_score(Yt_test,xgbc_predict)\n",
        "print('F1 score: %f' % f1)\n",
        "cm= confusion_matrix(Yt_test,xgbc_predict)\n",
        "cm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b0d4f934-576e-4587-df6c-1d4b71c324d5",
        "id": "D9Im5hMuyUYx"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ROCAUC score: 0.9424323451680604\n",
            "Accuracy score: 0.9422140097429867\n",
            "F1 score: 0.9420680363758842\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score\n",
        "print('ROCAUC score:',roc_auc_score(Yt_test, xgbc_predict))\n",
        "print('Accuracy score:',accuracy_score(Yt_test, xgbc_predict))\n",
        "print('F1 score:',f1_score(Yt_test,xgbc_predict))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a18f91bd-3039-489c-9c3d-4ac10152a624",
        "id": "Tz9dh5dQyUYx"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cohens kappa: 0.884459\n",
            "ROC AUC: 0.942432\n",
            "[[5624  246]\n",
            " [ 442 5594]]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import recall_score, precision_recall_curve,precision_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score, cohen_kappa_score\n",
        "# kappa\n",
        "kappa = cohen_kappa_score(Yt_test, xgbc_predict)\n",
        "print('Cohens kappa: %f' % kappa)\n",
        "# ROC AUC\n",
        "auc = roc_auc_score(Yt_test, xgbc_predict)\n",
        "print('ROC AUC: %f' % auc)\n",
        "# confusion matrix\n",
        "matrix = confusion_matrix(Yt_test, xgbc_predict)\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 217
        },
        "outputId": "c5307330-3977-4132-e522-08b7168d65d1",
        "id": "aBZpOatPyUYx"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Set: 11906\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-42-d39a7402854a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Test Set: {len(Xt_test)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mYt_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'value_counts'"
          ]
        }
      ],
      "source": [
        "print(f\"Test Set: {len(Xt_test)}\")\n",
        "print(Yt_test.value_counts())\n",
        "print(matrix)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = (35,10)"
      ],
      "metadata": {
        "id": "wgp7ccnLyUYx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# feature importance\n",
        "import matplotlib.pyplot as pyplot\n",
        "print(xgbc.feature_importances_)\n",
        "# plot\n",
        "pyplot.bar(range(len(xgbc.feature_importances_)), xgbc.feature_importances_)\n",
        "plt.xticks([x for x in range(len(xgbc.feature_importances_))], rotation=90)\n",
        "pyplot.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "7bf61436-4d96-4eec-bb83-7aee1e8d8a0b",
        "id": "imyk5goEyUYx"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.00000000e+00 0.00000000e+00 0.00000000e+00 3.58832528e-07\n",
            " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
            " 7.21761492e-04 0.00000000e+00 0.00000000e+00 1.51253923e-03\n",
            " 0.00000000e+00 7.63899824e-04 2.60572295e-04 2.89043385e-09\n",
            " 1.21974647e-05 8.56051944e-04 2.89588127e-09 3.81985306e-03\n",
            " 3.14551654e-07 3.35426968e-05 5.02068674e-03 2.33392892e-03\n",
            " 1.65898409e-03 7.06085542e-03 1.41195303e-04 8.10553472e-04\n",
            " 2.17000652e-03 6.64724576e-04 1.61324261e-04 5.70934988e-08\n",
            " 1.22134795e-03 1.62978719e-03 8.32208692e-04 5.66135191e-07\n",
            " 3.75715427e-03 4.67474390e-03 5.00565724e-03 1.93138017e-05\n",
            " 3.97850057e-04 4.22995138e-03 4.36743204e-03 2.03367918e-03\n",
            " 2.09568782e-06 1.50238401e-03 2.83314490e-03 5.80551954e-03\n",
            " 1.35920153e-04 6.40324564e-03 1.28157455e-03 7.67085110e-04\n",
            " 9.49471690e-03 6.09010325e-03 2.71087051e-03 5.43417744e-04\n",
            " 3.07759460e-04 6.07460249e-03 7.65202757e-04 5.49671821e-03\n",
            " 4.56454163e-04 7.41938676e-04 1.33751630e-02 3.54909340e-04\n",
            " 2.34411756e-03 1.36674847e-02 3.94779528e-03 7.65480231e-04\n",
            " 2.14489376e-03 4.03611040e-03 1.75261665e-03 1.86425317e-03\n",
            " 3.21512136e-03 9.36639111e-04 3.73091465e-03 3.74234654e-03\n",
            " 1.18247111e-03 6.58209492e-03 1.70267706e-03 6.82639634e-03\n",
            " 5.33559004e-03 3.15802982e-03 9.40444531e-03 4.12336736e-03\n",
            " 7.65675923e-03 3.48683222e-03 3.65389755e-02 2.80393192e-03\n",
            " 1.83814590e-03 4.39685000e-03 5.60443838e-03 6.20498467e-03\n",
            " 3.86185279e-03 6.80754868e-03 3.71412906e-03 5.48458905e-03\n",
            " 4.33745219e-03 5.94483407e-03 1.41369768e-02 2.25526350e-02\n",
            " 1.94544399e-02 1.51217444e-02 1.26145741e-03 1.36027692e-02\n",
            " 5.11470405e-03 5.74973962e-03 5.72036601e-03 1.64277080e-03\n",
            " 4.32864143e-03 3.92495488e-03 3.76357590e-03 7.50372543e-03\n",
            " 4.66132565e-03 6.51533967e-03 7.59777873e-03 5.40028302e-03\n",
            " 4.52402132e-03 1.32416491e-02 2.80225506e-03 1.68650490e-02\n",
            " 4.77912167e-03 1.81786497e-03 2.04674795e-03 5.21600387e-03\n",
            " 6.79500776e-03 2.88152244e-02 4.96845400e-03 2.73173593e-03\n",
            " 5.34471388e-03 1.21318825e-02 1.87076964e-03 4.87650856e-02\n",
            " 1.41979368e-02 1.22865255e-02 3.60436453e-02 8.75879008e-03\n",
            " 3.56680344e-03 1.57899303e-03 6.69237914e-03 4.62585964e-03\n",
            " 8.36344220e-03 6.97970845e-03 3.39327486e-03 2.56647990e-03\n",
            " 5.53359212e-03 1.64302269e-01 4.23021455e-03 3.42579407e-03\n",
            " 3.30007657e-03 4.96875302e-03 5.69478206e-03 7.43501535e-03\n",
            " 9.62599224e-03 4.98546569e-03 3.85141846e-03 6.01055324e-03\n",
            " 4.01264371e-03 3.27429483e-03 2.61439394e-03 4.67541364e-03\n",
            " 3.77174282e-03 5.73451232e-04 1.24059557e-03 1.02552234e-03\n",
            " 4.25951073e-03 4.13541630e-04 3.04922096e-02]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2520x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "imp= pd.DataFrame(xgbc.feature_importances_)\n",
        "f_imp= imp.set_axis(['Score'], axis=1, inplace=False)\n",
        "f_imp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "d80e902f-fe0e-47d1-8399-f661659a3668",
        "id": "H2nUYEgRyUYy"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Score\n",
              "0    0.000000e+00\n",
              "1    0.000000e+00\n",
              "2    0.000000e+00\n",
              "3    3.588325e-07\n",
              "4    0.000000e+00\n",
              "..            ...\n",
              "162  1.240596e-03\n",
              "163  1.025522e-03\n",
              "164  4.259511e-03\n",
              "165  4.135416e-04\n",
              "166  3.049221e-02\n",
              "\n",
              "[167 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-36e0ff48-1946-49a6-8f4b-6f661c469e8d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.588325e-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>162</th>\n",
              "      <td>1.240596e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>163</th>\n",
              "      <td>1.025522e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>164</th>\n",
              "      <td>4.259511e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>165</th>\n",
              "      <td>4.135416e-04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>166</th>\n",
              "      <td>3.049221e-02</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>167 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36e0ff48-1946-49a6-8f4b-6f661c469e8d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-36e0ff48-1946-49a6-8f4b-6f661c469e8d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-36e0ff48-1946-49a6-8f4b-6f661c469e8d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##\n",
        "from google.colab import files\n",
        "\n",
        "f_imp.to_csv('asxl_UnderMACCS_GB_HPT_FeatureImp.csv', encoding = 'utf-8-sig') \n",
        "files.download('asxl_UnderMACCS_GB_HPT_FeatureImp.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "558df66c-f3a9-4453-e253-31b805388117",
        "id": "pDGu3j2_yUYy"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_0a560f4b-3557-450c-a08a-07fa2b73cf4a\", \"asxl_UnderMACCS_GB_HPT_FeatureImp.csv\", 3967)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!cp 'asxl_UnderMACCS_GB_HPT_FeatureImp.csv' /content/drive/MyDrive/PhD/XGBoost_MACCS"
      ],
      "metadata": {
        "id": "WnXejM1syUYy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Decision Boundary"
      ],
      "metadata": {
        "id": "aSpCFhloyUYy"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K66FZmL-yUYy"
      },
      "outputs": [],
      "source": [
        " #### plotting  trail             https://scikit-learn.org/stable/auto_examples/ensemble/plot_voting_decision_regions.html#sphx-glr-auto-examples-ensemble-plot-voting-decision-regions-py\n",
        "from itertools import product\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn import datasets\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "\n",
        "# Loading some example data\n",
        "iris = datasets.load_iris()\n",
        "X = iris.data[:, [0, 2]]\n",
        "y = iris.target\n",
        "\n",
        "# Training classifiers\n",
        "clf1 = DecisionTreeClassifier(max_depth=4)\n",
        "clf2 = KNeighborsClassifier(n_neighbors=7)\n",
        "clf3 = SVC(gamma=0.1, kernel=\"rbf\", probability=True)\n",
        "eclf = VotingClassifier(\n",
        "    estimators=[(\"dt\", clf1), (\"knn\", clf2), (\"svc\", clf3)],\n",
        "    voting=\"soft\",\n",
        "    weights=[2, 1, 2],\n",
        ")\n",
        "\n",
        "clf1.fit(X, y)\n",
        "clf2.fit(X, y)\n",
        "clf3.fit(X, y)\n",
        "eclf.fit(X, y)\n",
        "\n",
        "# Plotting decision regions\n",
        "x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n",
        "y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n",
        "xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1), np.arange(y_min, y_max, 0.1))\n",
        "\n",
        "f, axarr = plt.subplots(2, 2, sharex=\"col\", sharey=\"row\", figsize=(10, 8))\n",
        "\n",
        "for idx, clf, tt in zip(\n",
        "    product([0, 1], [0, 1]),\n",
        "    [clf1, clf2, clf3, eclf],\n",
        "    [\"Decision Tree (depth=4)\", \"KNN (k=7)\", \"Kernel SVM\", \"Soft Voting\"],\n",
        "):\n",
        "\n",
        "    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n",
        "    Z = Z.reshape(xx.shape)\n",
        "\n",
        "    axarr[idx[0], idx[1]].contourf(xx, yy, Z, alpha=0.4)\n",
        "    axarr[idx[0], idx[1]].scatter(X[:, 0], X[:, 1], c=y, s=20, edgecolor=\"k\")\n",
        "    axarr[idx[0], idx[1]].set_title(tt)\n",
        "\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
